openapi: "3.1.0"
info:
  title: "E621"
  summary: OpenAPI definition for E621's API.
  description: OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)
  contact:
    name: Donovan_DMC
    url: https://e621.net/forum_topics/46279
  version: "84dcafc8c"

servers:
  - url: https://e621.net
    description: E621 (production)
  - url: http://localhost:3000
    description: E621 (Development)

x-constants:
  - &modaction-actions
    - artist_page_rename
    - artist_page_lock
    - artist_page_unlock
    - artist_user_linked
    - artist_user_unlinked
    - avoid_posting_create
    - avoid_posting_update
    - avoid_posting_delete
    - avoid_posting_undelete
    - avoid_posting_destroy
    - blip_delete
    - blip_hide
    - blip_unhide
    - blip_update
    - comment_delete
    - comment_hide
    - comment_unhide
    - comment_update
    - forum_category_create
    - forum_category_delete
    - forum_category_update
    - forum_post_delete
    - forum_post_hide
    - forum_post_unhide
    - forum_post_update
    - forum_topic_delete
    - forum_topic_hide
    - forum_topic_unhide
    - forum_topic_lock
    - forum_topic_unlock
    - forum_topic_stick
    - forum_topic_unstick
    - forum_topic_update
    - help_create
    - help_delete
    - help_update
    - ip_ban_create
    - ip_ban_delete
    - mascot_create
    - mascot_update
    - mascot_delete
    - pool_delete
    - report_reason_create
    - report_reason_delete
    - report_reason_update
    - set_update
    - set_delete
    - set_change_visibility
    - tag_alias_create
    - tag_alias_update
    - tag_implication_create
    - tag_implication_update
    - ticket_claim
    - ticket_unclaim
    - ticket_update
    - upload_whitelist_create
    - upload_whitelist_update
    - upload_whitelist_delete
    - user_blacklist_changed
    - user_text_change
    - user_upload_limit_change
    - user_flags_change
    - user_level_change
    - user_name_change
    - user_delete
    - user_ban
    - user_ban_update
    - user_unban
    - user_feedback_create
    - user_feedback_update
    - user_feedback_delete
    - user_feedback_undelete
    - user_feedback_destroy
    - wiki_page_rename
    - wiki_page_delete
    - wiki_page_lock
    - wiki_page_unlock
    - mass_update
    - nuke_tag
    - takedown_delete
    - takedown_process
    # legacy
    - created_positive_record
    - created_neutral_record
    - created_negative_record
    - created_flag_reason
    - edited_flag_reason
    - deleted_flag_reason
    - post_move_favorites
    - post_delete
    - post_undelete
    - post_destroy
    - post_rating_lock
    - post_unapprove
    - post_replacement_accept
    - post_replacement_reject
    - post_replacement_delete
  - &post-event-actions
    - deleted
    - undeleted
    - approved
    - unapproved
    - flag_created
    - flag_removed
    - favorites_moved
    - favorites_received
    - rating_locked
    - rating_unlocked
    - status_locked
    - status_unlocked
    - note_locked
    - note_unlocked
    - comment_locked
    - comment_unlocked
    - replacement_accepted
    - replacement_rejected
    - replacement_promoted
    - replacement_deleted
    - expunged
    - changed_bg_color
  - &ratings
    - s
    - q
    - e
  - &tag-categories
    - 0 #general
    - 1 # artist
    - 3 # copyright
    - 4 # character
    - 5 # species
    - 6 # invalid
    - 7 # meta
    - 8 # lore
  - &feedback-categories
    - negative
    - neutral
    - positive
  - &tag-request-statuses
    - active
    - deleted
    - processing
    - queued
    - retired
    - error
    - pending
  - &warning-types
    - warning
    - record
    - ban
  - &pool-categories
    - collection
    - series
  - &ticket-types
    - blip
    - comment
    - dmail
    - forum
    - pool
    - post
    - set
    - user
    - wiki
  - &ticket-statuses
    - pending
    - partial
    - approved

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  parameters:
    id:
      name: search[id]
      in: query
      description: Search for a specific id.
      schema:
        type: number
    limit:
      name: limit
      in: query
      description: The maximum number of results to return. Between 0 and 320.
      schema:
        type: number
        minimum: 0
        maximum: 500
    page:
      name: page
      in: query
      description: The page number of results to get. Between 1 and 750.
      schema:
        type: number
        minimum: 1
        maximum: 750
    ip_addr:
      name: search[ip_addr]
      in: query
      description: Must be Admin+ to use. See [postgres' documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, "is contained within or equals" (`<<=`).
      schema:
        type: string
  schemas:
    Artist:
      type: object
      required:
        - id
        - name
        - updated_at
        - is_active
        - other_names
        - group_name
        - linked_user_id
        - created_at
        - creator_id
        - is_locked
        - notes
        - urls
      properties:
        id:
          type: number
        name:
          type: string
        updated_at:
          type: string
          format: date-time
        is_active:
          type: boolean
        other_names:
          type: array
          items:
            type: string
        group_name:
          type: string
        linked_user_id:
          type: ["null", "number"]
        created_at:
          type: string
          format: date-time
        creator_id:
          type: number
        is_locked:
          type: boolean
        notes:
          type: ["null", "string"]
    ArtistURL:
      type: object
      required:
        - id
        - artist_id
        - url
        - normalized_url
        - created_at
        - updated_at
        - is_active
      properties:
        id:
          type: number
        artist_id:
          type: number
        url:
          type: string
          format: uri
        normalized_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_active:
          type: boolean
        artist:
          description: Only present in /artist_urls.json
          $ref: "#/components/schemas/Artist"
    ArtistVersion:
      type: object
      required:
        - id
        - artist_id
        - name
        - updater_id
        - created_at
        - updated_at
        - is_active
        - other_names
        - notes_changed
        - urls
      properties:
        id:
          type: number
        artist_id:
          type: number
        name:
          type: string
        updater_id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_active:
          type: boolean
        other_names:
          type: array
          items:
            type: string
        notes_changed:
          type: boolean
        urls:
          type: array
          items:
            type: string
            format: uri
    AvoidPosting:
      type: object
      required:
        - id
        - creator_id
        - updater_id
        - artist_id
        - details
        - is_active
        - created_at
        - updated_at
      properties:
        id:
          type: number
        creator_id:
          type: number
        updater_id:
          type: number
        artist_id:
          type: number
        staff_notes:
          type: string
          description: Only visible to Janitor+
        details:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AvoidPostingVersion:
      type: object
      required:
        - id
        - updater_id
        - avoid_posting_id
        - details
        - is_active
        - updated_at
      properties:
        id:
          type: number
        updater_id:
          type: number
        avoid_posting_id:
          type: number
        details:
          type: string
        staff_notes:
          type: string
          description: Only visible to Janitor+
        is_active:
          type: boolean
        updated_at:
          type: string
          format: date-time
    Ban:
      type: object
      required:
        - id
        - user_id
        - reason
        - expires_at
        - banner_id
        - created_at
        - updated_at
      properties:
        id:
          type: number
        user_id:
          type: number
        reason:
          type: string
        expires_at:
          type: ["string", "null"]
          format: date-time
        banner_id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Blip:
      type: object
      required:
        - id
        - creator_id
        - body
        - response_to
        - created_at
        - updated_at
        - is_hidden
        - warning_type
        - warning_user_id
        - updater_id
        - creator_name
      properties:
        id:
          type: number
        creator_id:
          type: number
        body:
          type: string
        response_to:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_hidden:
          type: boolean
        warning_type:
          type: string
          enum: *warning-types
        warning_user_id:
          type: number
        updater_id:
          type: number
        creator_name:
          type: string
    BulkRelatedTag:
      allOf:
        - $ref: "#/components/schemas/RelatedTag"
        - type: object
          required:
            - count
          properties:
            count:
              type: number
    BulkUpdateRequest:
      type: object
      required:
        - id
        - creator_id
        - forum_topic_id
        - script
        - status
        - created_at
        - updated_at
        - approver_id
        - forum_post_id
        - title
      properties:
        id:
          type: number
        creator_id:
          type: number
        forum_topic_id:
          type: ["number", "null"]
        script:
          type: string
          examples:
            - "alias a -> b"
        status:
          type: string
          enum:
            - approved
            - rejected
            - pending
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        approver_id:
          type: ["number", "null"]
        forum_post_id:
          type: ["number", "null"]
        title:
          type: string
    Comment:
      type: object
      required:
        - id
        - created_at
        - post_id
        - creator_id
        - body
        - score
        - updated_at
        - updater_id
        - do_not_bump_post
        - is_hidden
        - is_sticky
        - warning_type
        - warning_user_id
        - creator_name
        - updater_name
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        post_id:
          type: number
        creator_id:
          type: number
        body:
          type: string
        score:
          type: number
        updated_at:
          type: string
          format: date-time
        updater_id:
          type: number
        do_not_bump_post:
          type: boolean
          deprecated: true
        is_hidden:
          type: boolean
        is_sticky:
          type: boolean
        warning_type:
          type: ["string", "null"]
          enum: *warning-types
        warning_user_id:
          type: ["number", "null"]
        creator_name:
          type: string
        updater_name:
          type: string
    CurrentUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - blacklist_users
            - description_collapsed_initially
            - hide_comments
            - show_hidden_comments
            - show_post_statistics
            - receive_email_notifications
            - enable_keyboard_navigation
            - enable_privacy_mode
            - style_usernames
            - enable_auto_complete
            - disabled_cropped_thumbnails
            - enable_safe_mode
            - disable_responsive_mode
            - no_flagging
            - disable_user_dmails
            - enable_compact_uploader
            - replacements_beta
            - updated_at
            - email
            - last_logged_in_at
            - last_forum_read_at
            - recent_tags
            - comment_threshold
            - default_image_size
            - favorite_tags
            - blacklisted_tags
            - time_zone
            - per_page
            - custom_style
            - favorite_count
            - api_regen_multiplier
            - api_burst_limit
            - remaining_api_limit
            - statement_timeout
            - favorite_limit
            - tag_query_limit
            - has_mail
          properties:
            blacklist_users:
              type: boolean
            description_collapsed_initially:
              type: boolean
            hide_comments:
              type: boolean
            show_hidden_comments:
              type: boolean
            show_post_statistics:
              type: boolean
            receive_email_notifications:
              type: boolean
            enable_keyboard_navigation:
              type: boolean
            enable_privacy_mode:
              type: boolean
            style_usernames:
              type: boolean
            enable_auto_complete:
              type: boolean
            can_approve_posts:
              type: boolean
            disabled_cropped_thumbnails:
              type: boolean
            enable_safe_mode:
              type: boolean
            disable_responsive_mode:
              type: boolean
            no_flagging:
              type: boolean
            disable_user_dmails:
              type: boolean
            enable_compact_uploader:
              type: boolean
            replacements_beta:
              type: boolean
            updated_at:
              type: string
              format: date-time
            email:
              type: string
            last_logged_in_at:
              type: string
              format: date-time
            last_forum_read_at:
              type: string
              format: date-time
            recent_tags:
              type: string
            comment_threshold:
              type: number
            default_image_sizedefault_image_size:
              type: string
              enum:
                - large
                - fit
                - fitv
                - original
            favorite_tags:
              type: string
            blacklisted_tags:
              type: string
            time_zone:
              type: string
            per_page:
              type: number
            custom_style:
              type: string
            favorite_count:
              type: number
            api_regen_multiplier:
              type: number
            api_burst_limit:
              type: number
            remaining_api_limit:
              type: number
            statement_timeout:
              type: number
            favorite_limit:
              type: number
            tag_query_limit:
              type: number
            has_mail:
              type: boolean
    DMail:
      type: object
      required:
        - id
        - owner_id
        - from_id
        - to_id
        - title
        - body
        - is_read
        - is_deleted
        - created_at
        - updated_at
      properties:
        id:
          type: number
        owner_id:
          type: number
        from_id:
          type: number
        to_id:
          type: number
        title:
          type: string
        body:
          type: string
        is_read:
          type: boolean
        is_deleted:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    DeferredPost:
      type: object
      required:
        - id
        - flags
        - tags
        - rating
        - file_ext
        - width
        - height
        - size
        - created_at
        - uploader
        - uploader_id
        - score
        - fav_count
        - is_favorited
        - pools
        - md5
        - preview_url
        - large_url
        - file_url
        - preview_width
        - preview_height
      properties:
        id:
          type: number
        flags:
          type: string
        tags:
          type: string
        rating:
          type: string
          enum: *ratings
        file_ext:
          type: string
        width:
          type: number
        height:
          type: number
        size:
          type: number
        created_at:
          type: string
          format: date-time
        uploader:
          type: string
        uploader_id:
          type: number
        score:
          type: number
        fav_count:
          type: number
        is_favorited:
          type: boolean
        pools:
          type: array
          items:
            type: number
        md5:
          type: string
        preview_url:
          type: ["string", "null"]
        large_url:
          type: ["string", "null"]
        file_url:
          type: ["string", "null"]
        preview_width:
          type: number
        preview_height:
          type: number
    DTextResponse:
      type: object
      required:
        - html
        - posts
      properties:
        html:
          type: string
        posts:
          type: object
          patternProperties:
            "^0-9+$":
              $ref: "#/components/schemas/DeferredPost"
    EmailBlacklist:
      type: object
      reequired:
        - id
        - created_at
        - updated_at
        - domain
        - creator_id
        - reason
      properties:
        id:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
        domain:
          type: string
        creator_id:
          type: string
        reason:
          type: string
    ForumPost:
      type: object
      required:
        - id
        - topic_id
        - creator_id
        - updater_id
        - body
        - is_hidden
        - created_at
        - updated_at
        - warning_type
        - warning_user_id
      properties:
        id:
          type: number
        topic:
          type: number
        creator_id:
          type: number
        updater_id:
          type: number
        body:
          type: string
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        warning_type:
          type: ["string", "null"]
          enum: *warning-types
        warning_user_id:
          type: ["number", "null"]
    ForumTopic:
      type: object
      required:
        - id
        - creator_id
        - updater_id
        - title
        - response_count
        - is_sticky
        - is_locked
        - is_hidden
        - created_at
        - updated_at
        - category_id
      properties:
        id:
          type: number
        creator_id:
          type: number
        updater_id:
          type: number
        title:
          type: string
        response_count:
          type: number
        is_sticky:
          type: boolean
        is_locked:
          type: boolean
        is_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category_id:
          type: number
    FullCurrentUser:
      type: object
      allOf:
        - $ref: "#/components/schemas/CurrentUser"
        - $ref: "#/components/schemas/FullUser"
    FullUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - wiki_page_version_count
            - artist_version_count
            - pool_version_count
            - forum_post_count
            - comment_count
            - flag_count
            - favorite_count
            - positive_feedback_count
            - neutral_feedback_count
            - negative_feedback_count
            - upload_limit
            - profile_about
            - profile_artinfo
          properties:
            wiki_page_version_count:
              type: number
            artist_version_count:
              type: number
            pool_version_count:
              type: number
            forum_post_count:
              type: number
            comment_count:
              type: number
            flag_count:
              type: number
            favorite_count:
              type: number
            positive_feedback_count:
              type: number
            neutral_feedback_count:
              type: number
            negative_feedback_count:
              type: number
            upload_limit:
              type: number
            profile_about:
              type: string
            profile_artinfo:
              type: string
    Help:
      type: object
      required:
        - id
        - name
        - title
        - wiki_page
        - related
        - created_at
        - updated_at
      properties:
        id:
          type: number
        name:
          type: string
        title:
          type: string
        wiki_page:
          type: string
        related:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    IPBan:
      type: object
      description: Due to a global filter, the ip_addr is not present no matter your user level.
      required:
        - id
        - creator_id
        - reason
        - created_at
        - updated_at
      properties:
        id:
          type: number
        creator_id:
          type: number
        reason:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    IQDBPost:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - up_score
        - down_score
        - score
        - source
        - md5
        - rating
        - is_note_locked
        - is_rating_locked
        - is_status_locked
        - is_pending
        - is_flagged
        - is_deleted
        - uploader_id
        - approver_id
        - last_noted_at
        - last_comment_bumped_at
        - fav_count
        - tag_string
        - tag_count
        - tag_count_general
        - tag_count_artist
        - tag_count_character
        - tag_count_copyright
        - file_ext
        - file_size
        - image_width
        - image_height
        - parent_id
        - has_children
        - last_commented_at
        - has_active_children
        - bit_flags
        - tag_count_meta
        - locked_tags
        - tag_count_species
        - tag_count_invalid
        - description
        - comment_count
        - change_seq
        - tag_count_lore
        - bg_color
        - generated_samples
        - duration
        - is_comment_disabled
        - is_comment_locked
        - has_large
        - has_visible_children
        - children_ids
        - pool_ids
        - is_favorited
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        up_score:
          type: number
        down_score:
          type: number
        score:
          type: number
        source:
          type: string
        md5:
          type: string
        rating:
          type: string
          enum: *ratings
        is_note_locked:
          type: boolean
        is_rating_locked:
          type: boolean
        is_status_locked:
          type: boolean
        is_pending:
          type: boolean
        is_flagged:
          type: boolean
        is_deleted:
          type: boolean
        uploader_id:
          type: number
        approver_id:
          type: number
        last_noted_at:
          type: ["null", "string"]
          format: date-time
        last_comment_bumped_at:
          type: ["null", "string"]
          format: date-time
        fav_count:
          type: number
        tag_string:
          type: string
        tag_count:
          type: number
        tag_count_general:
          type: number
        tag_count_artist:
          type: number
        tag_count_character:
          type: number
        tag_count_copyright:
          type: number
        file_ext:
          type: string
        file_size:
          type: number
        image_width:
          type: number
        image_height:
          type: number
        parent_id:
          type: ["null", "number"]
        has_children:
          type: boolean
        last_commented_at:
          type: ["null", "string"]
          format: date-time
        has_active_children:
          type: boolean
        bit_flags:
          type: number
        tag_count_meta:
          type: number
        locked_tags:
          type: ["null", "string"]
        tag_count_species:
          type: number
        tag_count_invalid:
          type: number
        description:
          type: string
        comment_count:
          type: number
        change_seq:
          type: number
        tag_count_lore:
          type: number
        bg_color:
          type: ["null", "string"]
        generated_samples:
          type: ["null", "array"]
          items:
            type: string
            enum:
              - 720p
              - 480p
              - original
        duration:
          type: ["null", "string"]
        is_comment_disabled:
          type: boolean
        is_comment_locked:
          type: boolean
        has_large:
          type: boolean
        has_visible_children:
          type: boolean
        children_ids:
          type: ["null", "string"]
        pool_ids:
          type: array
          items:
            type: number
        is_favorited:
          type: boolean
        file_url:
          type: string
        large_file_url:
          type: string
        preview_file_url:
          type: string
    IQDBResponse:
      type: object
      required:
        - hash
        - post_id
        - score
        - post
      properties:
        hash:
          type: string
        post_id:
          type: number
        score:
          type: number
        post:
          type: object
          required:
            - posts
          properties:
            posts:
              $ref: "#/components/schemas/IQDBPost"
    Mascot:
      type: object
      required:
        - id
        - creator_id
        - display_name
        - md5
        - file_ext
        - background_color
        - artist_url
        - artist_name
        - active
        - created_at
        - updated_at
        - available_on
        - url_path
      properties:
        id:
          type: number
        creator_id:
          type: number
        display_name:
          type: string
        md5:
          type: string
        file_ext:
          type: string
        background_color:
          type: string
        artist_url:
          type: string
          format: uri
        artist_name:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        available_on:
          type: array
          items:
            type: string
        url_path:
          type: string
          format: uri
    ModAction:
      type: object
      required:
        - id
        - creator_id
        - created_at
        - updated_at
        - action
      properties:
        id:
          type: number
        creator_id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        action:
          type: string
          enum: *modaction-actions
    NewsUpdate:
      type: object
      required:
        - id
        - message
        - creator_id
        - updater_id
        - created_at
        - updated_at
      properties:
        id:
          type: number
        message:
          type: string
        creator_id:
          type: number
        updater_id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Note:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - creator_id
        - x
        - y
        - width
        - height
        - version
        - is_active
        - post_id
        - body
        - creator_name
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        creator_id:
          type: number
        x:
          type: number
        y:
          type: number
        width:
          type: number
        height:
          type: number
        version:
          type: number
        is_active:
          type: boolean
        post_id:
          type: number
        body:
          type: string
        creator_name:
          type: string
    NoteVersion:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - x
        - y
        - width
        - height
        - body
        - version
        - is_active
        - note_id
        - post_id
        - updater_id
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        x:
          type: number
        y:
          type: number
        width:
          type: number
        height:
          type: number
        body:
          type: string
        version:
          type: number
        is_active:
          type: boolean
        note_id:
          type: number
        post_id:
          type: number
        updater_id:
          type: number
    Pool:
      type: object
      required:
        - id
        - name
        - created_at
        - updated_at
        - creator_id
        - description
        - is_active
        - category
        - post_ids
        - creator_name
        - post_count
      properties:
        id:
          type: number
        name:
          type: string
        updated_at:
          type: string
          format: date-time
        creator_id:
          type: number
        description:
          type: string
        is_active:
          type: boolean
        category:
          type: string
          enum: *pool-categories
        post_ids:
          type: array
          items:
            type: number
        created_at:
          type: string
          format: date-time
        creator_name:
          type: string
        post_count:
          type: number
    PoolVersion:
      type: object
      required:
        - id
        - pool_id
        - post_ids
        - updater_id
        - created_at
        - updated_at
        - name
        - name_changed
        - description
        - description_changed
        - is_active
        - is_locked
        - category
        - version
        - added_post_ids
        - removed_post_ids
      properties:
        id:
          type: number
        pool_id:
          type: number
        post_ids:
          type: array
          items:
            type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        updater_id:
          type: number
        name:
          type: string
        name_changed:
          type: boolean
        description:
          type: string
        description_changed:
          type: boolean
        is_active:
          type: boolean
        is_locked:
          type: boolean
        category:
          type: string
          enum: *pool-categories
        version:
          type: number
        added_post_ids:
          type: array
          items:
            type: number
        removed_post_ids:
          type: array
          items:
            type: number
    Post:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - file
        - preview
        - sample
        - score
        - tags
        - locked_tags
        - change_seq
        - flags
        - rating
        - fav_count
        - sources
        - pools
        - relationships
        - approver_id
        - uploader_id
        - description
        - comment_count
        - is_favorited
        - has_notes
        - duration
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        file:
          type: object
          required:
            - width
            - height
            - ext
            - size
            - md5
            - url
          properties:
            width:
              type: number
            height:
              type: number
            ext:
              type: string
            size:
              type: number
            md5:
              type: string
            url:
              type: ["string", "null"]
        preview:
          type: object
          required:
            - width
            - height
            - url
          properties:
            width:
              type: number
            height:
              type: number
            url:
              type: ["string", "null"]
        sample:
          type: object
          required:
            - has
            - height
            - width
            - url
            - alternates
          properties:
            has:
              type: boolean
            height:
              type: ["number", "null"]
            width:
              type: ["number", "null"]
            url:
              type: ["string", "null"]
            alternates:
              type: object
              properties:
                480p:
                  $ref: "#/components/schemas/PostSampleAlternate"
                720p:
                  $ref: "#/components/schemas/PostSampleAlternate"
                original:
                  $ref: "#/components/schemas/PostSampleAlternate"
        score:
          type: object
          required:
            - up
            - down
            - total
          properties:
            up:
              type: number
            down:
              type: number
            total:
              type: number
        tags:
          type: object
          required:
            - general
            - artist
            - copyright
            - character
            - species
            - invalid
            - meta
            - lore
          properties:
            general:
              type: array
              items:
                type: string
            artist:
              type: array
              items:
                type: string
            copyright:
              type: array
              items:
                type: string
            character:
              type: array
              items:
                type: string
            species:
              type: array
              items:
                type: string
            invalid:
              type: array
              items:
                type: string
            meta:
              type: array
              items:
                type: string
            lore:
              type: array
              items:
                type: string
        locked_tags:
          type: ["array", "null"]
          items:
            type: string
        change_seq:
          type: number
        flags:
          type: object
          required:
            - pending
            - flagged
            - note_locked
            - status_locked
            - rating_locked
            - deleted
          properties:
            pending:
              type: boolean
            flagged:
              type: boolean
            note_locked:
              type: boolean
            status_locked:
              type: boolean
            rating_locked:
              type: boolean
            deleted:
              type: boolean
        rating:
          type: string
          enum: *ratings
        fav_count:
          type: number
        sources:
          type: array
          items:
            type: string
        pools:
          type: array
          items:
            type: number
        relationships:
          type: object
          required:
            - parent_id
            - has_children
            - has_active_children
            - children
          properties:
            parent_id:
              type: ["number", "null"]
            has_children:
              type: boolean
            has_active_children:
              type: boolean
            children:
              type: array
              items:
                type: number
        approver_id:
          type: ["number", "null"]
        uploader_id:
          type: number
        description:
          type: string
        comment_count:
          type: number
        is_favorited:
          type: boolean
        has_notes:
          type: boolean
        duration:
          type: ["number", "null"]
    PostApproval:
      type: object
      required:
        - id
        - user_id
        - post_id
        - created_at
        - updated_at
      properties:
        id:
          type: number
        user_id:
          type: number
        post_id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostDisapproval:
      type: object
      required:
        - id
        - user_id
        - post_id
        - reason
        - message
        - created_at
        - updated_at
      properties:
        id:
          type: number
        user_id:
          type: number
        post_id:
          type: number
        reason:
          type: string
          enum:
            - borderline_quality
            - borderline_relevancy
            - other
        message:
          type: ["string", "null"]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostEvents:
      type: object
      required:
        - id
        - creator_id
        - post_id
        - action
        - created_at
      properties:
        id:
          type: number
        creator_id:
          type: ["number", "null"]
        post_id:
          type: number
        action:
          type: string
          enum: *post-event-actions
        created_at:
          type: string
          format: date-time
    PostFlag:
      type: object
      required:
        - id
        - created_at
        - post_id
        - reason
        - creator_id
        - is_resolved
        - updated_at
        - is_deletion
        - type
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        post_id:
          type: number
        reason:
          type: string
        creator_id:
          type: ["number", "null"]
        is_resolved:
          type: boolean
        updated_at:
          type: string
          format: date-time
        is_deletion:
          type: boolean
        type:
          type: string
          enum:
            - flag
            - deletion
    PostReplacement:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - post_id
        - creator_id
        - approver_id
        - file_ext
        - file_size
        - image_height
        - image_width
        - md5
        - source
        - file_name
        - status
        - reason
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        post_id:
          type: number
        creator_id:
          type: number
        approver_id:
          type: ["number", "null"]
        file_ext:
          type: string
        file_size:
          type: number
        image_height:
          type: number
        image_width:
          type: number
        md5:
          type: string
        source:
          type: string
        file_name:
          type: string
        status:
          type: string
          enum:
            - prompted
            - approved
            - rejected
            - pending
        reason:
          type: string
    PostSampleAlternate:
      type: object
      required:
        - type
        - height
        - width
        - urls
      properties:
        type:
          type: string
          enum:
            video
        height:
          type: number
        width:
          type: number
        urls:
          type: array
          items:
            - type: ["string", "null"]
              format: "uri"
            - type: ["string", "null"]
              format: "uri"
    PostSet:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - creator_id
        - is_public
        - name
        - shortname
        - description
        - transfer_on_delete
        - post_ids
        - post_count
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        creator_id:
          type: number
        is_public:
          type: boolean
        name:
          type: string
        shortname:
          type: string
        description:
          type: string
        post_count:
          type: number
        transfer_on_delete:
          type: boolean
        post_ids:
          type: array
          items:
            type: number
    PostVersion:
      type: object
      required:
        - id
        - post_id
        - tags
        - updater_id
        - updated_at
        - rating
        - parent_id
        - source
        - description
        - reason
        - locked_tags
        - added_tags
        - removed_tags
        - added_locked_tags
        - removed_locked_tags
        - rating_changed
        - parent_changed
        - source_changed
        - description_changed
        - version
        - obsolete_added_tags
        - obsolete_removed_tags
        - unchanged_tags
        - updater_name
      properties:
        id:
          type: number
        post_id:
          type: number
        tags:
          type: string
        updater_id:
          type: number
        updated_at:
          type: string
          format: date-time
        rating:
          type: string
          enum: *ratings
        parent_id:
          type: ["number", "null"]
        source:
          type: string
        description:
          type: string
        reason:
          type: ["string", "null"]
        locked_tags:
          type: ["string", "null"]
        added_tags:
          type: array
          items:
            type: string
        removed_tags:
          type: array
          items:
            type: string
        added_locked_tags:
          type: array
          items:
            type: string
        removed_locked_tags:
          type: array
          items:
            type: string
        rating_changed:
          type: boolean
        parent_changed:
          type: boolean
        source_changed:
          type: boolean
        description_changed:
          type: boolean
        version:
          type: number
        obsolete_added_tags:
          type: string
        obsolete_removed_tags:
          type: string
        unchanged_tags:
          type: string
        updater_name:
          type: string
    RelatedTag:
      type: object
      required:
        - name
        - category_id
      properties:
        name:
          type: string
        category_id:
          type: number
          enum: *tag-categories
    Tag:
      type: object
      required:
        - id
        - name
        - post_count
        - related_tags
        - related_tags_updated_at
        - category
        - is_locked
        - created_at
        - updated_at
      properties:
        id:
          type: number
        name:
          type: string
        post_count:
          type: number
        related_tags:
          type: array
          items:
            type: string
        related_tags_updated_at:
          type: ["string", "null"]
          format: date-time
        category:
          type: number
          enum: *tag-categories
        is_locked:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TagAlias:
      type: object
      required:
        - id
        - antecedent_name
        - reason
        - creator_id
        - created_at
        - forum_post_id
        - updated_at
        - forum_topic_id
        - consequent_name
        - status
        - post_count
        - approver_id
      properties:
        id:
          type: number
        antecedent_name:
          type: string
        reason:
          type: string
        creator_id:
          type: number
        created_at:
          type: ["string", "null"]
          format: date-time
        forum_post_id:
          type: ["number", "null"]
        updated_at:
          type: ["string", "null"]
          format: date-time
        forum_topic_id:
          type: ["number", "null"]
        consequent_name:
          type: string
        status:
          type: string
          description: |
            Note: The "error" status will be proceeded by an error, ex: "error: Validation failed: A tag alias for tag_name already exists"
          enum: *tag-request-statuses
        post_count:
          type: number
        approver_id:
          type: ["number", "null"]
    TagImplication:
      type: object
      required:
        - id
        - reason
        - creator_id
        - created_at
        - forum_post_id
        - antecedent_name
        - consequent_name
        - status
        - forum_topic_id
        - updated_at
        - descendant_names
        - approver_id
      properties:
        id:
          type: number
        reason:
          type: string
        creator_id:
          type: number
        created_at:
          type: string
          format: date-time
        forum_post_id:
          type: ["number", "null"]
        antecedent_name:
          type: string
        consequent_name:
          type: string
        status:
          type: string
          description: |
            Note: The "error" status will be proceeded by an error, ex: "error: Validation failed: A tag alias for tag_name already exists"
          enum: *tag-request-statuses
        forum_topic_id:
          type: ["number", "null"]
        updated_at:
          type: string
          format: date-time
        descendant_names:
          type: array
          items:
            type: string
        approver_id:
          type: ["number", "null"]
    TagPreview:
      type: object
      required:
        - a
        - type
        - tagTypeA
      properties:
        a:
          type: string
          description: The name if type=tag, else the antecedent.
        b:
          type: string
          description: The consequent, only present if type=alias or type=implication.
        type:
          type: string
          enum:
            - tag
            - implication
            - alias
        tagTypeA:
          type: ["number", "null"]
          enum: *tag-categories
        tagTypeB:
          type: ["number", "null"]
          enum: *tag-categories
    TagTypeVersion:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - old_type
        - new_type
        - is_locked
        - tag_id
        - creator_id
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        old_type:
          type: number
          enum: *tag-categories
        new_type:
          type: number
          enum: *tag-categories
        is_locked:
          type: boolean
        tag_id:
          type: number
        creator_id:
          type: number
    Takedown:
      type: object
      required:
        - id
        - status
        - approver_id
        - reason_hidden
        - created_at
        - updated_at
        - post_count
      properties:
        id:
          tpe: number
        status:
          type: string
          enum:
            - approved
            - denied
            - partial
            - pending
        approver_id:
          type: ["number", "null"]
        reason_hidden:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        post_count:
          type: number
    Ticket:
      type: object
      required:
        - id
        - creator_id
        - reason
        - disp_id
        - qtype
        - status
        - created_at
        - updated_at
        - response
        - handler_id
        - report_reason
        - accused_id
      properties:
        id:
          type: number
        creator_id:
          type: number
        reason:
          type: string
        disp_id:
          type: number
        qtype:
          type: string
          enum: *ticket-types
        status:
          type: string
          enum: *ticket-statuses
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        response:
          type: string
        handler_id:
          type: ["number", "null"]
        claimant_id:
          type: ["number", "null"]
          description: Only visible to Moderator+.
        report_reason:
          type: ["string", "null"]
        accused_id:
          type: ["number", "null"]
    UploadWhitelist:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - pattern
        - note
        - hidden
        - allowed
        - reason
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        pattern:
          type: string
        note:
          type: string
        hidden:
          type: boolean
        allowed:
          type: boolean
        reason:
          type: string
    Upload:
      type: object
      required:
        - id
        - source
        - rating
        - uploader_id
        - tag_string
        - status
        - backtrace
        - post_id
        - md5_confirmation
        - created_at
        - updated_at
        - parent_id
        - md5
        - file_ext
        - file_size
        - image_width
        - image_height
        - description
        - uploader_name
      properties:
        id:
          type: number
        source:
          type: string
        rating:
          type: string
          enum: *ratings
        uploader_id:
          type: number
        tag_string:
          type: string
        status:
          type: string
          description: |
            Note: The "error" status will be proceeded by an error, ex: "error: RuntimeError - No file or source URL provided"
          enum:
            - completed
            - duplicate
            - error
            - processing
            - pending
        backtrace:
          type: ["string", "null"]
        post_id:
          type: ["number", "null"]
        md5_confirmation:
          type: "null"
          deprecated: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        parent_id:
          type: ["null", "number"]
        md5:
          type: ["string", "null"]
        file_ext:
          type: ["string", "number"]
        file_size:
          type: ["null", "number"]
        image_width:
          type: ["null", "number"]
        image_height:
          type: ["null", "number"]
        description:
          type: string
        uploader_name:
          type: string
    User:
      type: object
      required:
        - id
        - created_at
        - name
        - level
        - base_upload_limit
        - post_upload_count
        - post_update_count
        - note_update_count
        - is_banned
        - can_approve_posts
        - can_upload_free
        - level_string
        - avatar_id
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        name:
          type: string
        level:
          type: number
        base_upload_limit:
          type: number
        post_upload_count:
          type: number
        post_update_count:
          type: number
        note_update_count:
          type: number
        is_banned:
          type: boolean
        can_approve_posts:
          type: boolean
        can_upload_free:
          type: boolean
        level_string:
          type: string
        avatar_id:
          type: ["number", "null"]
    UserFeedback:
      type: object
      required:
        - id
        - user_id
        - creator_id
        - category
        - body
        - created_at
        - updated_at
        - updater_id
        - is_deleted
      properties:
        id:
          type: number
        user_id:
          type: number
        creator_id:
          type: number
        category:
          type: string
          enum: *feedback-categories
        body:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        updater_id:
          type: number
        is_deleted:
          type: boolean
    UserNameChangeRequest:
      type: object
      required:
        - id
        - approver_id
        - user_id
        - original_name
        - desired_name
        - created_at
        - updated_at
        - status
      properties:
        id:
          type: number
        approver_id:
          type: number
        user_id:
          type: number
        original_name:
          type: string
        desired_name:
          type: string
        change_reason:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - approved
    WikiPage:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - title
        - body
        - creator_id
        - is_locked
        - updater_id
        - is_deleted
        - other_names
        - parent
        - creator_name
        - category_id
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        body:
          type: string
        creator_id:
          type: number
        is_locked:
          type: boolean
        updater_id:
          type: number
        is_deleted:
          type: boolean
        other_names:
          type: array
          items:
            type: string
        parent:
          type: ["string", "null"]
        creator_name:
          type: string
        category_id:
          type: number
          enum: *tag-categories
    WikiPageVersion:
      type: object
      required:
        - id
        - created_at
        - updated_at
        - title
        - body
        - updater_id
        - wiki_page_id
        - is_locked
        - other_names
        - is_deleted
        - reason
        - parent
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
        body:
          type: string
        updater_id:
          type: number
        wiki_page_id:
          type: number
        is_locked:
          type: boolean
        other_names:
          type: array
          items:
            type: string
        is_deleted:
          type: boolean
        reason:
          type: ["string", "null"]
        parent:
          type: ["string", "null"]
  responses:
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - success
              - reason
            properties:
              success:
                type: boolean
                enum:
                  - false
              reason:
                type: string
                enum:
                  - "not found"
    AccessDenied:
      description: Access Denied
      content:
        application/json:
          schema:
            type: object
            required:
              - success
              - reason
            properties:
              success:
                type: boolean
                enum:
                  - false
              reason:
                type: string
                enum:
                  - "Access Denied"
    ExpectedError:
      description: Invalid Input Data
      content:
        application/json:
          schema:
            type: object
            required:
              - errors
            examples:
              - { "errors": { "key": [ "the error" ] } }
            properties:
              errors:
                type: object
                patternProperties:
                  "^[a-z]+$":
                    type: array
                    items:
                      type: string
    MessageError:
      description: Error
      content:
        application/json:
          schema:
            type: object
            required:
              - success
              - message
            properties:
              success:
                type: boolean
                enum:
                  - false
              message:
                type: string
              code:
                type: ["string", "null"]
    warning:
      description: Warning
      content:
        application/json:
          type: object
          required:
            - record_type
          properties:
            record_type:
              type: string
              enum:
                - unmark
                - ban
                - record
                - warning
  requestBodies:
    warning:
      content:
        application/json:
          type: object
          required:
            - record_type
          properties:
            record_type:
              type: string
              enum:
                - unmark
                - ban
                - record
                - warning

paths:
  # Artists
  /artists.json:
    get:
      summary: Search Artists
      tags:
        - Artists
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - updated_at
              - name
              - post_count
        - name: search[name]
          in: query
          schema:
            type: string
        - name: search[group_name]
          in: query
          schema:
            type: string
        - name: search[any_other_name_like]
          in: query
          schema:
            type: string
        - name: search[any_name_matches]
          in: query
          schema:
            type: string
        - name: search[any_name_or_url_matches]
          in: query
          schema:
            type: string
        - name: search[url_matches]
          in: query
          schema:
            type: string
        - name: search[creator_name]
          in: query
          schema:
            type: string
        - name: search[creator_id]
          in: query
          schema:
            type: string
        - name: search[has_tag]
          in: query
          schema:
            type: string
        - name: search[is_linked]
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Artist"
                    - type: object
                      examples: [["e621.net", 1]]
                      required:
                        - domains
                        - urls
                      properties:
                        domains:
                          type: array
                          items:
                            type: array
                            items:
                              - type: string
                              - type: number
                        urls:
                          type: array
                          items:
                            $ref: "#/components/schemas/ArtistURL"
    post:
      summary: Create Artist
      tags:
        - Artists
      security:
        - basicAuth: []
      description: |
        `other_names` & `urls` are silently truncated to 25 entries.
        `notes` is silently truncated to the wiki page limit (250,000).
        Individual `other_names` are silently truncated to 100 characters.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                other_names:
                  type: array
                  items:
                    type: string
                other_names_string:
                  type: string
                url_string:
                  type: string
                notes:
                  type: string
                group_name:
                  type: string
                linked_user_id:
                  type: ["number", "null"]
                  description: Only usable for Janitor+
                is_locked:
                  type: boolean
                  description: Only usable for Janitor+
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /artists/{idOrName}.json:
    get:
      summary: Get Artist
      tags:
        - Artists
      parameters:
        - name: idOrName
          in: path
          required: true
          description: The ID or name of the artist to get.
          schema:
            type: ["number", "string"]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Artist"
                  - type: object
                    examples: [["e621.net", 1]]
                    required:
                      - domains
                      - urls
                    properties:
                      domains:
                        type: array
                        items:
                          type: array
                          items:
                            - type: string
                            - type: number
                      urls:
                        type: array
                        items:
                          $ref: "#/components/schemas/ArtistURL"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Artist
      tags:
        - Artists
      security:
        - basicAuth: []
      description: |
        If an artist is locked, you must be Janitor+ to edit them.
        `other_names` & `urls` are silently truncated to 25 entries.
        `notes` is silently truncated to the wiki page limit (250,000).
        Individual `other_names` are silently truncated to 100 characters.
        If an artist is on the avoid posting list, you must have the bd staff user flag to edit name, other_names, or group_name.
      parameters:
        - name: idOrName
          in: path
          required: true
          description: The ID or name of the artist to edit.
          schema:
            type: ["number", "string"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Only usable for Janitor+
                other_names:
                  type: array
                  items:
                    type: string
                other_names_string:
                  type: string
                url_string:
                  type: string
                notes:
                  type: string
                group_name:
                  type: string
                linked_user_id:
                  type: ["number", "null"]
                  description: Only usable for Janitor+
                is_locked:
                  type: boolean
                  description: Only usable for Janitor+
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Artist
      tags:
        - Artists
      security:
        - basicAuth: []
      description: |
        You must be an Admin+ to delete an artist.
      parameters:
        - name: idOrName
          in: path
          required: true
          description: The ID or name of the artist to edit.
          schema:
            type: ["number", "string"]
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /artists/{idOrName}/revert.json:
    put:
      summary: Revert Artist
      tags:
        - Artists
      security:
        - basicAuth: []
      description: |
        If an artist is locked, you must be Janitor+ to revert them.
      parameters:
        - name: idOrName
          in: path
          required: true
          description: The ID or name of the artist to revert.
          schema:
            type: ["number", "string"]
        - name: version_id
          in: query
          required: true
          description: The version ID to revert to.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Artist Versions
  /artist_versions.json:
    get:
      summary: Search Artist Versions
      tags:
        - Artist Versions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          description: The order of the results.
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - name
        - name: search[name]
          in: query
          description: The name of the artist.
          schema:
            type: string
        - name: search[artist_id]
          in: query
          description: The id of the artist.
          schema:
            type: string
        - name: search[updater_name]
          in: query
          description: The name of the user that updated the artist.
          schema:
            type: string
        - name: search[updater_id]
          in: query
          description: The id of the user that updated the artist.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistVersion"
  # Artist URLs
  /artist_urls.json:
    get:
      summary: Search Artist URLs
      tags:
        - Artist URLs
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          description: The order of the results.
          schema:
            type: string
            enum:
              - id
              - id_asc
              - id_desc
              - artist_id
              - artist_id_asc
              - artist_id_desc
              - url
              - url_asc
              - url_desc
              - normalized_url
              - normalized_url_asc
              - normalized_url_desc
              - created_at
              - created_at_asc
              - created_at_desc
              - updated_at
              - updated_at_asc
              - updated_at_desc
        - name: search[artist_name]
          in: query
          description: The name of the artist.
          schema:
            type: string
        - name: search[artist_id]
          in: query
          description: The id of the artist.
          schema:
            type: string
        - name: search[is_active]
          in: query
          description: If the artist url is active.
          schema:
            type: boolean
        - name: search[url]
          in: query
          description: The url.
          schema:
            type: string
        - name: search[normalized_url]
          in: query
          description: The normalized url. (http:, trailing `/`)
          schema:
            type: string
        - name: search[artist]
          in: query
          description: Legacy nested search for artist. Supports the same parameters as /artists.json.
          deprecated: true
          schema:
            type: object
        - name: search[url_matches]
          in: query
          description: Legacy name for `search[url]`.
          deprecated: true
          schema:
            type: string
        - name: search[normalized_url_matches]
          in: query
          description: Legacy name for `search[normalized_url]`.
          deprecated: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistURL"
  # Avoid Posting Entries
  /avoid_postings.json:
    get:
      summary: Search Avoid Posting Entries
      tags:
        - Avoid Posting Entries
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - name: search[creator_name]
          in: query
          schema:
            type: string
        - name: search[creator_id]
          in: query
          schema:
            type: string
        - name: search[any_name_matches]
          in: query
          description: Any name matching.
          schema:
            type: string
        - name: search[artist_name]
          in: query
          description: The artist name of the avoid posting entry.
          schema:
            type: string
        - name: search[artist_id]
          in: query
          description: The artist id for the avoid posting entry.
          schema:
            type: string
        - name: search[any_other_name_matches]
          in: query
          description: Any other name matching.
          schema:
            type: string
        - name: search[details]
          in: query
          description: The details of the avoid posting entry.
          schema:
            type: string
        - name: search[staff_notes]
          in: query
          description: The staff notes on the avoid posting entry. Must be Janitor+ to use.
          schema:
            type: string
        - name: search[is_active]
          in: query
          description: If the avoid posting entry is active.
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AvoidPosting"
    post:
      summary: Create Avoid Posting Entry
      tags:
        - Avoid Posting Entries
      security:
        - basicAuth: []
      description: Must have the bd staff user flag.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - artist_attributes
              properties:
                details:
                  type: string
                staff_notes:
                  type: string
                is_active:
                  type: boolean
                artist_attributes:
                  type: object
                  description: Name or ID is required. If name is provided and the artist does not exist, an artist will be created.
                  required:
                    type: object
                    properties:
                      id:
                        type: number
                      name:
                        type: string
                      other_names_string:
                        type: string
                      other_names:
                        type: array
                        items:
                          type: string
                      group_name:
                        type: string
                      linked_user_id:
                        type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvoidPosting"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /avoid_postings/{idOrArtistName}.json:
    get:
      summary: Get Avoid Posting Entry
      tags:
        - Avoid Posting Entries
      parameters:
        - name: idOrArtistName
          in: path
          required: true
          description: The ID of the avoid posting entry, or the name of the artist.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvoidPosting"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Avoid Posting Entry
      tags:
        - Avoid Posting Entries
      security:
        - basicAuth: []
      description: Must have the bd staff user flag.
      parameters:
        - name: idOrArtistName
          in: path
          required: true
          description: The ID of the avoid posting entry, or the name of the artist.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                details:
                  type: string
                staff_notes:
                  type: string
                is_active:
                  type: boolean
                artist_attributes:
                  type: object
                  required:
                    type: object
                    properties:
                      name:
                        type: string
                      other_names_string:
                        type: string
                      other_names:
                        type: array
                        items:
                          type: string
                      group_name:
                        type: string
                      linked_user_id:
                        type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvoidPosting"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Destroy Avoid Posting Entry
      tags:
        - Avoid Posting Entries
      security:
        - basicAuth: []
      description: Must have the bd staff user flag.
      parameters:
        - name: idOrArtistName
          in: path
          required: true
          description: The ID of the avoid posting entry, or the name of the artist.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /avoid_postings/{idOrArtistName}/delete.json:
    put:
      summary: Delete Avoid Posting Entry
      tags:
        - Avoid Posting Entries
      security:
        - basicAuth: []
      description: Must have the bd staff user flag.
      parameters:
        - name: idOrArtistName
          in: path
          required: true
          description: The ID of the avoid posting entry, or the name of the artist.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /avoid_postings/{idOrArtistName}/undelete.json:
    put:
      summary: Undelete Avoid Posting Entry
      tags:
        - Avoid Posting Entries
      security:
        - basicAuth: []
      description: Must have the bd staff user flag.
      parameters:
        - name: idOrArtistName
          in: path
          required: true
          description: The ID of the avoid posting entry, or the name of the artist.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Avoid Posting Versions
  /avoid_posting_versions.json:
    get:
      summary: Search Avoid Posting Versions
      tags:
        - Avoid Posting Versions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[ip_addr]
          in: query
          description: Must be Admin+ to use. See [postgres' documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, "is contained within or equals" (`<<=`).
          schema:
            type: string
        - name: search[order]
          in: query
          description: The order of the results.
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - name: search[updater_name]
          in: query
          description: The name of the updater of the avoid posting entry.
          schema:
            type: string
        - name: search[updater_id]
          in: query
          description: The ID of the updater of the avoid posting entry.
          schema:
            type: string
        - name: search[any_name_matches]
          in: query
          description: Any name matching.
          schema:
            type: string
        - name: search[artist_name]
          in: query
          description: The artist name of the avoid posting entry.
          schema:
            type: string
        - name: search[artist_id]
          in: query
          description: The artist id for the avoid posting entry.
          schema:
            type: string
        - name: search[any_other_name_matches]
          in: query
          description: Any other name matching.
          schema:
            type: string
        - name: search[group_name]
          in: query
          description: Any other name matching.
          schema:
            type: string
        - name: search[is_active]
          in: query
          description: If the avoid posting entry is active.
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AvoidPostingVersion"
  # Bans
  /bans.json:
    get:
      summary: Search Bans
      tags:
        - Bans
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          description: The order of the results.
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - expires_at_desc
        - name: search[banner_id]
          in: query
          description: The ID of the banner.
          schema:
            type: string
        - name: search[banner_name]
          in: query
          description: The name of banner.
          schema:
            type: string
        - name: search[user_id]
          in: query
          description: The ID of the banned user.
          schema:
            type: string
        - name: search[user_name]
          in: query
          description: The name of the banned user.
          schema:
            type: string
        - name: search[reason_matches]
          in: query
          description: The reason of the ban.
          schema:
            type: string
        - name: search[expired]
          in: query
          description: If the ban is expired.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ban"
  /bans/{id}.json:
    get:
      summary: Get Ban
      tags:
        - Bans
      parameters:
        - name: id
          in: path
          description: The ID of the ban to get.
          required: true
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        404:
          $ref: "#/components/responses/NotFound"
  # Blips
  /blips.json:
    get:
      summary: Search Blips
      tags:
        - Blips
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - updated_at
              - updated_at_desc
        - name: search[creator_id]
          in: query
          schema:
            type: number
        - name: search[creator_name]
          in: query
          schema:
            type: string
        - name: search[body_matches]
          in: query
          schema:
            type: string
        - name: search[response_to]
          in: query
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blip"
  /blips/{id}.json:
    get:
      summary: Get Blip
      tags:
        - Blips
      parameters:
        - name: id
          in: path
          description: The ID of the blip to get.
          required: true
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blip"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Blip
      tags:
        - Blips
      security:
        - basicAuth: []
      description: Unless Admin+, blips cannot be edited after 5 minutes. Marked blips cannot be edited.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateRequest"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Blip
      tags:
        - Blips
      security:
        - basicAuth: []
      description: |
        You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blip.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /blips/{id}/hide.json:
    post:
      summary: Hide Blip
      tags:
        - Blips
      security:
        - basicAuth: []
      description: |
        You must be the creator or Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blip.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blip"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /blips/{id}/unhide.json:
    post:
      summary: Unhide Blip
      tags:
        - Blips
      security:
        - basicAuth: []
      description: |
        You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blip.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blip"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /blips/{id}/warning.json:
    post:
      summary: Mark Blip
      tags:
        - Blips
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blip.
          schema:
            type: number
      requestBody:
        $ref: "#/components/requestBodies/warning"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DTextResponse"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Bulk Update Requests
  /bulk_update_requests.json:
    get:
      summary: Search Bulk Update Requests
      tags:
        - Bulk Update Requests
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - status_desc
              - updated_at_desc
              - updated_at_asc
        - name: search[user_id]
          in: query
          schema:
            type: number
        - name: search[user_name]
          in: query
          schema:
            type: string
        - name: search[approver_id]
          in: query
          schema:
            type: number
        - name: search[approver_name]
          in: query
          schema:
            type: string
        - name: search[forum_topic_id]
          in: query
          schema:
            type: number
        - name: search[forum_post_id]
          in: query
          schema:
            type: number
        - name: search[status]
          in: query
          schema:
            type: string
            description: Multiple can be specified via comma separating.
            enum:
              - approved
              - rejected
              - pending
        - name: search[title_matches]
          in: query
          schema:
            type: string
        - name: search[script_matches]
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BulkUpdateRequest"
    post:
      summary: Create Bulk Update Request
      tags:
        - Bulk Update Requests
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - script
                - title
                - reason
              properties:
                script:
                  type: string
                title:
                  type: string
                reason:
                  type: string
                forum_topic_id:
                  type: number
                skip_forum:
                  type: boolean
                  description: Only usable for Admin+
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateRequest"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /bulk_update_request/{id}.json:
    get:
      summary: Get Bulk Update Request
      tags:
        - Bulk Update Requests
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the bulk update request.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUpdateRequest"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Bulk Update Request
      tags:
        - Bulk Update Requests
      security:
        - basicAuth: []
      description: You must be the creator of the BUR, or Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the bulk update request.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                script:
                  type: string
                forum_topic_id:
                  description: You must be Admin+.
                  type: string
                forum_post_id:
                  description: You must be Admin+.
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Reject Bulk Update Request
      tags:
        - Bulk Update Requests
      security:
        - basicAuth: []
      description: You must be the creator of the BUR, or Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the bulk update request.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /bulk_update_request/{id}/approve.json:
    post:
      summary: Approve Bulk Update Request
      tags:
        - Bulk Update Requests
      description: Must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the bulk update request.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Comments
  /comments.json:
    get:
      summary: Search Comments
      description: For searching comments, group_by=comment must be set.
      tags:
        - Comments
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - status
              - status_desc
              - updated_at_desc
        - in: query
          name: group_by
          schema:
            type: string
            enum:
              - comment
              - post
        - in: query
          name: search[body_matches]
          schema:
            type: string
        - in: query
          name: search[post_id]
          description: Accepts a comma separated list.
          schema:
            type: number
        - in: query
          name: search[post_tags_match]
          schema:
            type: string
        - in: query
          name: search[post_note_updater_name]
          schema:
            type: string
        - in: query
          name: search[post_note_updater_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[is_sticky]
          schema:
            type: boolean
        - in: query
          name: search[is_hidden]
          description: Only usable by Moderator+
          schema:
            type: boolean
        - in: query
          name: search[do_not_bump_post]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
    post:
      summary: Create Comment
      tags:
        - Comments
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
                - post_id
              properties:
                body:
                  type: string
                post_id:
                  type: number
                do_not_bump_post:
                  type: boolean
                is_sticky:
                  type: boolean
                  description: Only usable for Janitor+
                is_hidden:
                  type: boolean
                  description: Only usable for Moderator+
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /comments/{id}.json:
    get:
      summary: Get Comment
      tags:
        - Comments
      description: If the comment is hidden, you must be the creator or Moderator+ to see it.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Comment
      tags:
        - Comments
      security:
        - basicAuth: []
      description: |
        You must be the creator of the comment, or Admin+ to edit. Marked comments cannot be edited.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                is_sticky:
                  type: boolean
                  description: Only usable for Moderator+
                is_hidden:
                  type: boolean
                  description: Only usable for Moderator+
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Comment
      tags:
        - Comments
      security:
        - basicAuth: []
      description: |
        You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /comments/{id}/hide.json:
    post:
      summary: Hide Comment
      tags:
        - Comments
      security:
        - basicAuth: []
      description: |
        You must be the creator or Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /comments/{id}/unhide.json:
    post:
      summary: Unhide Comment
      tags:
        - Comments
      security:
        - basicAuth: []
      description: |
        You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /comments/{id}/warning.json:
    post:
      summary: Mark Comment
      tags:
        - Comments
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: number
      requestBody:
        $ref: "#/components/requestBodies/warning"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DTextResponse"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Comment Votes
  /comments/{id}/votes.json:
    post:
      summary: Create Comment Vote
      tags:
        - Comment Votes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: string
        - name: score
          in: query
          required: true
          schema:
            type: number
            enum:
              - -1
              - 1
        - name: no_unvote
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - score
                  - our_score
                properties:
                  score:
                    type: number
                  our_score:
                    type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Comment Vote
      tags:
        - Comment Votes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /comment_votes/lock.json:
    post:
      summary: Lock Comment Votes
      tags:
        - Comment Votes
      security:
        - basicAuth: []
      description: |
        You must be Moderator+. Errors if ids is not provided.
      parameters:
        - name: ids
          in: query
          required: true
          description: The IDs of the comment votes, comma separated.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /comment_votes/delete.json:
    post:
      summary: Delete Comment Vote
      tags:
        - Comment Votes
      security:
        - basicAuth: []
      description: |
        You must be Admin+. Errors if ids is not provided.
      parameters:
        - name: ids
          in: query
          required: true
          description: The IDs of the comment votes, comma separated.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
  # DMails
  /dmails.json:
    get:
      summary: Search DMails
      tags:
        - DMails
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - in: query
          name: search[title_matches]
          schema:
            type: string
        - in: query
          name: search[message_matches]
          schema:
            type: string
        - in: query
          name: search[to_name]
          schema:
            type: string
        - in: query
          name: search[to_id]
          schema:
            type: number
        - in: query
          name: search[from_name]
          schema:
            type: string
        - in: query
          name: search[from_id]
          schema:
            type: number
        - in: query
          name: search[is_read]
          schema:
            type: boolean
        - in: query
          name: search[is_deleted]
          schema:
            type: boolean
        - in: query
          name: search[read]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DMail"
  /dmails/{id}.json:
    get:
      summary: Get DMail
      tags:
        - DMails
      description: Fetching a dmail will not mark it as read.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dmail.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DMail"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete DMail
      tags:
        - DMails
      security:
        - basicAuth: []
      description: Deleting simply hides your copy of the dmail.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dmail.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /dmails/{id}/mark_as_read.json:
    put:
      summary: Mark DMail As Read
      tags:
        - DMails
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dmail.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /dmails/{id}/mark_as_unread.json:
    put:
      summary: Mark DMail As Unread
      tags:
        - DMails
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the dmail.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /dmails/mark_all_as_unread.json:
    put:
      summary: Mark All DMail As Unread
      tags:
        - DMails
      security:
        - basicAuth: []
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # DText Preview
  /dtext_preview.json:
    post:
      summary: Preview DText
      tags:
        - DText
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DTextResponse"
  # Email Blacklists
  /email_blacklists.json:
    get:
      summary: Search Email Blacklists
      tags:
        - Email Blacklists
      description: You must be Admin+.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - reason
              - domain
        - in: query
          name: search[domain]
          schema:
            type: string
        - in: query
          name: search[reason]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmailBlacklist"
    post:
      summary: Create Email Blacklist
      tags:
        - Email Blacklists
      description: You must be Admin+.
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - domain
                - reason
              properties:
                domain:
                  type: string
                reason:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailBlacklist"
        422:
          $ref: "#/components/responses/ExpectedError"
  /email_blacklists/{id}.json:
    delete:
      summary: Delete Email Blacklist
      tags:
        - Email Blacklists
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the email blacklist.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Favorites
  /favorites.json:
    get:
      summary: List Favorites
      tags:
        - Favorites
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - in: query
          name: user_id
          description: You must be the user or Moderator+ if the user has their favorites hidden.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - posts
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Create Favorite
      tags:
        - Favorites
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                post_ud:
                  type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /favorites/{id}.json:
    delete:
      summary: Delete Favorite
      tags:
        - Favorites
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Forum Post
  /forum_posts.json:
    get:
      summary: Search Forum Posts
      tags:
        - Forum Posts
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[topic_id]
          schema:
            type: number
        - in: query
          name: search[topic_title_matches]
          schema:
            type: string
        - in: query
          name: search[body_matches]
          schema:
            type: string
        - in: query
          name: search[topic_category_id]
          schema:
            type: number
        - in: query
          name: search[is_hidden]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ForumPost"
    post:
      summary: Create Forum Post
      tags:
        - Forum Posts
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
                - topic_id
              properties:
                body:
                  type: string
                topic_id:
                  type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumPost"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /forum_posts/{id}.json:
    get:
      summary: Get Forum Post
      tags:
        - Forum Posts
      description: If the forum post is hidden, you must be the creator or Moderator+ to see it.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumPost"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Forum Post
      tags:
        - Forum Posts
      security:
        - basicAuth: []
      description: You must be the creator of the forum post, or Admin+ to edit. Marked forum posts cannot be edited.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Forum Post
      tags:
        - Forum Posts
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_posts/{id}/hide.json:
    post:
      summary: Hide Forum Post
      tags:
        - Forum Posts
      security:
        - basicAuth: []
      description: You must be the creator or Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumPost"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_posts/{id}/unhide.json:
    post:
      summary: Unhide Forum Post
      tags:
        - Forum Posts
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumPost"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_posts/{id}/warning.json:
    post:
      summary: Mark Forum Post
      tags:
        - Forum Posts
      security:
        - basicAuth: []
      description: |
        You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: number
      requestBody:
        $ref: "#/components/requestBodies/warning"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DTextResponse"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Forum Post Votes
  /forum_posts/{id}/votes.json:
    post:
      summary: Create Forum Post Vote
      tags:
        - Forum Post Votes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: string
        - name: score
          in: query
          required: true
          schema:
            type: number
            enum:
              - -1
              - 0
              - 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumPostVote"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Forum Post Vote
      tags:
        - Forum Post Votes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum post.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Forum Topics
  /forum_topics.json:
    get:
      summary: Search Forum Topics
      tags:
        - Forum Topics
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - sticky
        - in: query
          name: search[title]
          schema:
            type: string
        - in: query
          name: search[title_matches]
          schema:
            type: string
        - in: query
          name: search[category_id]
          schema:
            type: number
        - in: query
          name: search[is_sticky]
          schema:
            type: boolean
        - in: query
          name: search[is_locked]
          schema:
            type: boolean
        - in: query
          name: search[is_hidden]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ForumTopic"
    post:
      summary: Create Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - category_id
                - original_post_attributes
              properties:
                title:
                  type: string
                category_id:
                  type: number
                original_post_attributes:
                  type: object
                  description: Mutually exclusive, at least one must be provided.
                  properties:
                    id:
                      type: number
                      description: Forum post ID.
                    body:
                      type: string
                      description: First forum post body.
                is_sticky:
                  type: boolean
                  description: You must be Moderator+.
                is_locked:
                  type: boolean
                  description: You must be Moderator+.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumTopic"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /forum_topics/{id}.json:
    get:
      summary: Get Forum Forum Topic
      tags:
        - Forum Topics
      description: If the forum topic is hidden, you must be the creator or Moderator+ to see it.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumTopic"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                category_id:
                  type: number
                original_post_attributes:
                  type: object
                  description: Mutually exclusive.
                  properties:
                    id:
                      type: number
                      description: Forum post ID. Silently ignored.
                    body:
                      type: string
                      description: First forum post body.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_topics/{id}/hide.json:
    post:
      summary: Hide Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      description: You must be the creator or Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumTopic"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_topics/{id}/unhide.json:
    post:
      summary: Unhide Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumTopic"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_topics/{id}/subscribe.json:
    post:
      summary: Subscribe To Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumTopic"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_topics/{id}/unsubscribe.json:
    post:
      summary: Unsubscribe From Forum Topic
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the forum topic.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForumTopic"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /forum_topics/mark_all_as_read.json:
    put:
      summary: Mark All Forum Topics As Read
      tags:
        - Forum Topics
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - category_id
              properties:
                category_id:
                  type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
  # Help Pages
  /help.json:
    get:
      summary: List Help Pages
      description: Will error if no help pages exist.
      tags:
        - Help Pages
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Help"
    post:
      summary: Create Help Page
      tags:
        - Help Pages
      security:
        - basicAuth: []
      description: You must be Admin+.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - help_page[name]
                - help_page[wiki_page]
              properties:
                help_page[name]:
                  type: string
                help_page[wiki_page]:
                  type: string
                help_page[related]:
                  type: string
                  description: Separate with a comma followed by a space.
                help_page[title]:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Help"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /help/{idOrName}.json:
    get:
      summary: Get Help Page
      tags:
        - Help Pages
      parameters:
        - name: idOrName
          in: path
          required: true
          description: The ID or name of the help page.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Help"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Help Page
      tags:
        - Help Pages
      security:
        - basicAuth: []
      description: You must be Admin+
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the help page.
          schema:
            type: number
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                help_page[name]:
                  type: string
                help_page[wiki_page]:
                  type: string
                help_page[related]:
                  type: string
                  description: Separate with a comma followed by a space.
                help_page[title]:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Help Page
      tags:
        - Help Pages
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the help page.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # IP Bans
  /ip_bans.json:
    get:
      summary: List IP Bans
      tags:
        - IP Bans
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[banner_id]
          schema:
            type: number
        - in: query
          name: search[banner_name]
          schema:
            type: string
        - in: query
          name: search[reason]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IPBan"
    post:
      summary: Create IP Ban
      tags:
        - IP Bans
      security:
        - basicAuth: []
      description: You must be Admin+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - ip_addr
                - reason
              properties:
                ip_addr:
                  type: string
                reason:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IPBan"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /ip_bans/{id}.json:
    delete:
      summary: Delete IP Ban
      tags:
        - IP Bans
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the ip ban.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # IQDB
  /iqdb_queries.json:
    get:
      summary: Query IQDB
      tags:
        - IQDB
      parameters:
        - name: search[score_cutoff]
          in: query
          schema:
            type: number
        - name: search[url]
          in: query
          schema:
            type: string
        - name: search[post_id]
          in: query
          schema:
            type: number
        - name: search[hash]
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - posts
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/IQDBResponse"
        403:
          $ref: "#/components/responses/AccessDenied"
    post:
      summary: Query IQDB
      tags:
        - IQDB
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                search[file]:
                  type: binary
                search[score_cutoff]:
                  type: number
                search[url]:
                  type: string
                search[post_id]:
                  type: string
                search[hash]:
                  type: string
          application/json:
            schema:
              type: object
              properties:
                score_cutoff:
                  type: number
                url:
                  type: string
                post_id:
                  type: string
                hash:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - posts
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/IQDBResponse"
        403:
          $ref: "#/components/responses/AccessDenied"
  # Mascots
  /mascots.json:
    get:
      summary: Search Mascots
      tags:
        - Mascots
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Mascot"
    post:
      summary: Create Mascot
      tags:
        - Mascots
      security:
        - basicAuth: []
      description: You must be Admin+.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - mascot[mascot_file]
                - mascot[display_name]
                - mascot[background_color]
                - mascot[artist_url]
                - mascot[artist_name]
              properties:
                mascot[mascot_file]:
                  type: binary
                mascot[display_name]:
                  type: string
                mascot[background_color]:
                  type: string
                mascot[artist_url]:
                  type: string
                mascot[artist_name]:
                  type: string
                mascot[available_on_string]:
                  type: string
                  description: Comma separated site names.
                mascot[active]:
                  type: boolean
                mascot[hide_anonymous]:
                  type: boolean
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Mascot"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /mascots/{id}.json:
    patch:
      summary: Edit Mascot
      tags:
        - Mascots
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the mascot.
          schema:
            type: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                mascot[mascot_file]:
                  type: binary
                mascot[display_name]:
                  type: string
                mascot[background_color]:
                  type: string
                mascot[artist_url]:
                  type: string
                mascot[artist_name]:
                  type: string
                mascot[available_on_string]:
                  type: string
                  description: Comma separated site names.
                mascot[active]:
                  type: boolean
                mascot[hide_anonymous]:
                  type: boolean
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Mascot
      tags:
        - Mascots
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the mascot.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Mod Actions
  /mod_actions.json:
    get:
      summary: Search Mod Actions
      tags:
        - Mod Actions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[action]
          schema:
            type: string
            enum: *modaction-actions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModAction"
  # News Updates
  /news_updates.json:
    get:
      summary: List News Updates
      tags:
        - News Updates
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NewsUpdate"
    post:
      summary: Create News Update
      tags:
        - News Updates
      security:
        - basicAuth: []
      description: You must be Admin+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewsUpdate"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /news_updates/{id}.json:
    patch:
      summary: Edit News Updates
      tags:
        - Help Pages
      security:
        - basicAuth: []
      description: You must be Admin+
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the news update.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete News Update
      tags:
        - News Updates
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the news update.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Notes
  /notes.json:
    get:
      summary: Search Notes
      tags:
        - Notes
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[body_matches]
          schema:
            type: string
        - in: query
          name: search[is_active]
          schema:
            type: boolean
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[post_tags_match]
          schema:
            type: string
        - in: query
          name: search[post_note_updater_id]
          schema:
            type: number
        - in: query
          name: search[post_note_updater_name]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
    post:
      summary: Create Note
      tags:
        - Notes
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
                - x
                - y
                - width
                - height
                - body
              properties:
                post_id:
                  type: number
                x:
                  type: number
                y:
                  type: number
                width:
                  type: number
                height:
                  type: number
                body:
                  type: string
                html_id:
                  type: string
                  description: Passthrough, used in frontend.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Note"
                  - type: object
                    required:
                      - html_id
                    properties:
                      html_id:
                        type: string
                        description: Passthrough, used in frontend.
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /notes/{id}.json:
    get:
      summary: Get Note
      tags:
        - Notes
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the note.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Note
      tags:
        - Notes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the note.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                x:
                  type: number
                y:
                  type: number
                width:
                  type: number
                height:
                  type: number
                body:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Note
      tags:
        - Notes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the note.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /notes/{id}/revert.json:
    post:
      summary: Revert Note
      tags:
        - Notes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the note.
          schema:
            type: number
        - name: version_id
          in: query
          required: true
          description: The version ID to revert to.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Note Versions
  /note_versions.json:
    put:
      summary: Search Note Versions
      tags:
        - Note Versions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          description: The order of the results.
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[updater_id]
          schema:
            type: number
        - in: query
          name: search[updater_name]
          schema:
            type: string
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[note_id]
          schema:
            type: number
        - in: query
          name: search[is_active]
          schema:
            type: boolean
        - in: query
          name: search[body_matches]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NoteVersion"
  # Pools
  /pools.json:
    get:
      summary: Search Pools
      tags:
        - Pools
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - name
              - created_at
              - post_count
        - in: query
          name: search[name_matches]
          schema:
            type: string
        - in: query
          name: search[description_matches]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[category]
          schema:
            type: string
            enum: *pool-categories
        - in: query
          name: search[is_active]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pool"
    post:
      summary: Create Pool
      tags:
        - Pools
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                category:
                  type: string
                  enum: *pool-categories
                is_active:
                  type: boolean
                post_ids_string:
                  type: string
                  description: Space separated list of post IDs. Mutually exclusive with post_ids.
                post_ids:
                  type: array
                  description: Array of post IDs. Mutually exclusive with post_ids_string.
                  items:
                    type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /pools/{id}.json:
    get:
      summary: Get Pool
      tags:
        - Pools
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pool.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Pool
      tags:
        - Pools
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pool.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                is_active:
                  type: boolean
                category:
                  type: string
                  enum: *pool-categories
                  description: If the pool has more than 30 posts, you must be Janitor+.
                post_ids_string:
                  type: string
                  description: Space separated list of post IDs. Mutually exclusive with post_ids.
                post_ids:
                  type: array
                  description: Array of post IDs. Mutually exclusive with post_ids_string.
                  items:
                    type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Pool
      tags:
        - Pools
      description: You must be Janitor+.
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pool.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /pools/{id}/revert.json:
    put:
      summary: Revert Pool
      tags:
        - Pools
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the pool.
          schema:
            type: number
        - name: version_id
          in: query
          required: true
          description: The version ID to revert to.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Pool Element
  /pool_element.js:
    post:
      summary: Add Post To Pool
      tags:
        - Posts
      security:
        - basicAuth: []
      description: Note that the extension is JS, this route will not return JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                pool_id:
                  type: number
                pool_name:
                  type: string
                post_id:
                  type: number
      responses:
        200:
          description: Success
  /pool_element.json:
    delete:
      summary: Remove Post From Pool
      tags:
        - Posts
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - pool_id
                - post_id
              properties:
                pool_id:
                  type: number
                post_id:
                  type: number
      responses:
        204:
          description: Success
  # Pool Versions
  /pool_versions.json:
    get:
      summary: Search Pool Versions
      tags:
        - Pool Versions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          description: The order of the results.
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[updater_id]
          schema:
            type: number
        - in: query
          name: search[updater_name]
          schema:
            type: string
        - in: query
          name: search[pool_id]
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PoolVersion"
  # Popular
  /popular.json:
    get:
      summary: List Most Upvoted Posts
      tags:
        - Popular
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: date
          in: query
          description: The date to list popular uploads for. Only The day, month, and year are considered.
          schema:
            type: string
            format: date
        - name: scale
          in: query
          description: The scale of the results, in relation to `date`.
          schema:
            type: string
            enum:
              - month
              - week
              - day
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - posts
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
  # Posts
  /posts.json:
    get:
      summary: Search Posts
      tags:
        - Posts
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - in: query
          name: tags
          schema:
            type: string
        - in: query
          name: md5
          schema:
            type: string
        - in: query
          name: random
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - posts
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
  /posts/{id}.json:
    get:
      summary: Get Post
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Post
      tags:
        - Posts
      security:
        - basicAuth: []
      description: Most errors are silently swallowed.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_string:
                  type: string
                  description: Replaces all tags on the post.
                old_tag_string:
                  type: string
                  description: The tag string before your edits, used to reconcile conflicts.
                tag_string_diff:
                  type: string
                  description: Tags with a minus are removed, else they are added. Mutually exclusive with tag_string.
                source_diff:
                  type: string
                  description: Sources with a minus are removed, else they are added. It is not possible to add inactive sources through this. Mutually exclusive with source.
                source:
                  type: string
                  description: Replaces all sources on the post.
                old_source:
                  type: string
                  description: The sources before your edits, used to reconcile conflicts.
                parent_id:
                  type: number
                old_parent_id:
                  type: number
                description:
                  type: string
                old_description:
                  type: string
                rating:
                  type: string
                  enum: *ratings
                old_rating:
                  type: string
                  enum: *ratings
                edit_reason:
                  type: string
                is_rating_locked:
                  type: boolean
                  description: You must be Privileged+.
                is_note_locked:
                  type: boolean
                  description: You must be Janitor+.
                bg_color:
                  type: string
                  description: You must be Janitor+.
                is_comment_locked:
                  type: boolean
                  description: You must be Admin+.
                is_status_locked:
                  type: boolean
                  description: You must be Admin+.
                locked_tags:
                  type: string
                  description: You must be Admin+.
                hide_from_anonymous:
                  type: boolean
                  description: You must be Admin+.
                hide_from_search_engines:
                  type: boolean
                  description: You must be Admin+.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/{id}/update_iqdb.json:
    get:
      summary: Update Post IQDB
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/{id}/mark_as_translated.json:
    post:
      summary: Mark Post As Translated
      tags:
        - Posts
      security:
        - basicAuth: []
      description: Will error if no body is provided.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                translation_check:
                  type: boolean
                partially_translated:
                  type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"

        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/{id}/add_to_pool.json:
    put:
      summary: Add Post To Pool
      tags:
        - Posts
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
        - name: pool_id
          in: query
          description: The ID of the pool to add the post to. Mutually exclusive with pool_name.
          schema:
            type: number
        - name: pool_name
          in: query
          description: The name of the pool to add the post to. Mutually exclusive with pool_id.
          schema:
            type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /posts/{id}/remove_from_pool.json:
    put:
      summary: Remove Post From Pool
      tags:
        - Posts
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
        - name: pool_id
          in: query
          description: The ID of the pool to remove the post from. Mutually exclusive with pool_name.
          schema:
            type: number
        - name: pool_name
          in: query
          description: The name of the pool to remove the post from. Mutually exclusive with pool_id.
          schema:
            type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pool"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /posts/{id}/copy_notes.json:
    put:
      summary: Copy Notes To Post
      tags:
        - Posts
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - other_post_id
              properties:
                other_post_id:
                  type: number
      responses:
        204:
          description: Success
        400:
          $ref: "#/components/responses/MessageError"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /posts/{id}/revert.json:
    post:
      summary: Revert Post
      tags:
        - Posts
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
        - name: version_id
          in: query
          required: true
          description: The version ID to revert to.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/{id}/show_seq.json:
    get:
      summary: Get Post Sequence
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
        - name: seq
          in: query
          description: The direction to move in the sequence.
          schema:
            type: string
            enum:
              - next
              - prev
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                   - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/{id}/flag.json:
    delete:
      summary: Unflag Post
      tags:
        - Posts
      description: You must have the "Approve Posts" permission.
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                approval:
                  type: string
                  description: Approves the post if set to "approve".
                  schema:
                    - approve
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /posts/random.json:
    get:
      summary: Get Random Post
      tags:
        - Posts
      parameters:
        - name: tags
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        404:
          $ref: "#/components/responses/NotFound"
  # Post Sets
  /post_sets.json:
    get:
      summary: Search Post Sets
      tags:
        - Post Sets
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - name
              - shortname
              - post_count
              - postcount
              - created_at
              - updated_at
              - update
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[name]
          schema:
            type: string
        - in: query
          name: search[shortname]
          schema:
            type: string
        - in: query
          name: search[is_public]
          description: You must be Moderator+.
          schema:
            type: boolean
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[maintainer_id]
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostSet"
    post:
      summary: Create Post Set
      tags:
        - Post Sets
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - shortname
              properties:
                name:
                  type: string
                shortname:
                  type: string
                description:
                  type: string
                is_public:
                  type: boolean
                transfer_on_delete:
                  type: boolean
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSet"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_sets/{id}.json:
    get:
      summary: Get Post Set
      tags:
        - Post Sets
      description: You must be Moderator+ if the set is not public.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post set.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSet"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Post Set
      tags:
        - Post Sets
      security:
        - basicAuth: []
      description: You must be the owner of the set, or Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post sets.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                shortname:
                  type: string
                description:
                  type: string
                is_public:
                  type: boolean
                transfer_on_delete:
                  type: boolean
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Post Set
      tags:
        - Post Sets
      security:
        - basicAuth: []
      description: You must be the owner of the set, or Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post set.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /post_sets/{id}/update_posts.json:
    post:
      summary: Update Post Set Posts
      tags:
        - Post Sets
      security:
        - basicAuth: []
      description: You must be the owner of the set, a maintainer (if public), or Admin+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_set
              properties:
                post_set:
                  type: object
                  required:
                    - post_ids_string
                  properties:
                    post_ids_string:
                      type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSet"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_sets/{id}/add_posts.json:
    post:
      summary: Add Posts To Post Set
      tags:
        - Post Sets
      security:
        - basicAuth: []
      description: You must be the owner of the set, a maintainer (if public), or Admin+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_ids
              properties:
                post_ids:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSet"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_sets/{id}/remove_posts.json:
    post:
      summary: Remove Posts From Post Set
      tags:
        - Post Sets
      security:
        - basicAuth: []
      description: You must be the owner of the set, a maintainer (if public), or Admin+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_ids
              properties:
                post_ids:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostSet"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_sets/for_select.json:
    get:
      summary: List Post Sets For Select
      tags:
        - Post Sets
      security:
        - basicAuth: []
      description: You must be the owner of the set, a maintainer (if public), or Admin+.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  Owned:
                    type: array
                    items:
                      - type: string
                      - type: number
                  Maintained:
                    type: array
                    items:
                      - type: string
                      - type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Post Approvals
  /post_approvals.json:
    get:
      summary: Search Post Approvals
      tags:
        - Post Approvals
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - name: search[post_tags_match]
          in: query
          schema:
            type: string
        - name: search[user_id]
          in: query
          schema:
            type: number
        - name: search[user_name]
          in: query
          schema:
            type: string
        - name: search[post_id]
          in: query
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostApproval"
  # Post Events
  /post_events.json:
    get:
      summary: Search Post Events
      tags:
        - Post Events
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[action]
          schema:
            type: string
            enum: *post-event-actions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post_events
                properties:
                  post_events:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostEvent"
  # Post Flags
  /post_flags.json:
    get:
      summary: Search Post Flags
      tags:
        - Post Flags
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[reason_matches]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[post_tags_match]
          schema:
            type: string
        - in: query
          name: search[type]
          schema:
            type: string
        - in: query
          name: search[is_resolved]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostFlag"
    post:
      summary: Create Post Flag
      tags:
        - Post Flags
      security:
        - basicAuth: []
      description: Will error if post_id is not provided.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - post_flag[post_id]
                - post_flag[reason_name]
              properties:
                post_flag[post_id]:
                  type: number
                post_flag[reason_name]:
                  type: string
                  enum:
                    - uploading_guidelines
                    - young_human
                    - dnp_artist
                    - pay_content
                    - trace
                    - previously_deleted
                    - real_porn
                    - corrupt
                    - inferior
                post_flag[parent_id]:
                  type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostFlag"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_flags/{id}.json:
    get:
      summary: Get Post Flag
      tags:
        - Post Flags
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post flag.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostFlag"
        404:
          $ref: "#/components/responses/NotFound"
  # Post Replacements
  /post_replacements.json:
    get:
      summary: Search Post Replacements
      tags:
        - Post Replacements
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - in: query
          name: search[file_ext]
          schema:
            type: string
        - in: query
          name: search[md5]
          schema:
            type: string
        - in: query
          name: search[status]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[approver_id]
          schema:
            type: number
        - in: query
          name: search[approver_name]
          schema:
            type: string
        - in: query
          name: search[rejector_id]
          schema:
            type: number
        - in: query
          name: search[rejector_name]
          schema:
            type: string
        - in: query
          name: search[uploader_name_on_approve]
          schema:
            type: string
        - in: query
          name: search[uploader_id_on_approve]
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostReplacement"
    post:
      summary: Create Post Replacement
      tags:
        - Post Replacements
      security:
        - basicAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - post_replacement[reason]
              properties:
                post_replacement[replacement_file]:
                  type: binary
                  description: Mutually exclusive with replacement_url.
                post_replacement[replacement_url]:
                  type: string
                  description: Mutually exclusive with replacement_file.
                post_replacement[reason]:
                  type: string
                post_replacement[source]:
                  type: string
                post_replacement[as_pending]:
                  type: boolean
                  description: You must be Janitor+.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - location
                properties:
                  success:
                    type: boolean
                    enum:
                      - true
                  location:
                    type: string
                    example: "/posts/1"
        403:
          $ref: "#/components/responses/AccessDenied"
        412:
          $ref: "#/components/responses/MessageError"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/replacements/{id}.json:
    delete:
      summary: Delete Post Replacement
      tags:
        - Post Replacements
      description: You must be Admin+.
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post replacement.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /posts/replacements/{id}/approve.json:
    put:
      summary: Approve Post Replacement
      tags:
        - Post Replacements
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/replacements/{id}/reject.json:
    put:
      summary: Reject Post Replacement
      tags:
        - Post Replacements
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/replacements/{id}/promote.json:
    post:
      summary: Promote Post Replacement
      tags:
        - Post Replacements
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/replacements/{id}/toggle_penalize.json:
    put:
      summary: Toggle Post Replacement Penalty
      tags:
        - Post Replacements
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Post Versions
  /post_versions.json:
    get:
      summary: Search Post Versions
      tags:
        - Post Versions
      description: Errors if no results are found.
      parameters:
        - $ref: "#/components/parameters/limit"
        - name: page
          in: query
          description: The page number of results to get. Between 1 and 750. Note that for post versions specifically, you can only go through the 10,000 most recent results with page numbers.
          schema:
            type: number
            minimum: 1
            maximum: 750
        - $ref: "#/components/parameters/id"
        - in: query
          name: search[updater_name]
          schema:
            type: string
        - in: query
          name: search[updater_id]
          schema:
            type: number
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[start_id]
          schema:
            type: number
        - in: query
          name: search[rating]
          schema:
            type: string
            enum: *ratings
        - in: query
          name: search[rating_changed]
          schema:
            type: string
            enum:
              - e
              - q
              - s
              - any
        - in: query
          name: search[parent_id]
          schema:
            type: number
        - in: query
          name: search[parent_id_changed]
          schema:
            type: boolean
        - in: query
          name: search[tags]
          schema:
            type: string
        - in: query
          name: search[tags_removed]
          schema:
            type: string
        - in: query
          name: search[tags_added]
          schema:
            type: string
        - in: query
          name: search[locked_tags]
          schema:
            type: string
        - in: query
          name: search[locked_tags_removed]
          schema:
            type: string
        - in: query
          name: search[locked_tags_added]
          schema:
            type: string
        - in: query
          name: search[reason]
          schema:
            type: string
        - in: query
          name: search[description]
          schema:
            type: string
        - in: query
          name: search[description_changed]
          schema:
            type: boolean
        - in: query
          name: search[source_changed]
          schema:
            type: boolean
        - in: query
          name: search[uploads]
          schema:
            type: string
            enum:
              - included
              - excluded
              - only
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostVersion"
  # Post Votes
  /posts/{id}/votes.json:
    post:
      summary: Create Post Vote
      tags:
        - Post Votes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: string
        - name: score
          in: query
          required: true
          schema:
            type: number
            enum:
              - -1
              - 1
        - name: no_unvote
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - score
                  - up
                  - down
                  - our_score
                properties:
                  score:
                    type: number
                  up:
                    type: number
                  down:
                    type: number
                  our_score:
                    type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Post Vote
      tags:
        - Post Votes
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_votes/lock.json:
    post:
      summary: Lock Post Vote
      tags:
        - Post Votes
      security:
        - basicAuth: []
      description: You must be Moderator+. Errors if ids is not provided.
      parameters:
        - name: ids
          in: query
          required: true
          description: The IDs of the post votes, comma separated.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /post_votes/delete.json:
    post:
      summary: Delete Post Vote
      tags:
        - Post Votes
      security:
        - basicAuth: []
      description: You must be Admin+. Errors if ids is not provided.
      parameters:
        - name: ids
          in: query
          required: true
          description: The IDs of the post votes, comma separated.
          schema:
            type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
  # Tags
  /tags.json:
    get:
      summary: Search Tags
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - name
              - date
              - count
              - similarity
        - in: query
          name: search[fuzzy_name_matches]
          schema:
            type: string
        - in: query
          name: search[name_matches]
          schema:
            type: string
        - in: query
          name: search[name]
          schema:
            type: string
        - in: query
          name: search[category]
          schema:
            type: number
            description: Allows multiple, comma separated.
            enum: *tag-categories
        - in: query
          name: search[hide_empty]
          schema:
            type: boolean
        - in: query
          name: search[has_wiki]
          schema:
            type: boolean
        - in: query
          name: search[has_artist]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
  /tags/{id}.json:
    get:
      summary: Get Tag
      tags:
        - Tags
      parameters:
        - name: id
          in: path
          required: true
          description: The ID or name of the tag.
          schema:
            type: ["number", "string"]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Tag
      tags:
        - Tags
      security:
        - basicAuth: []
      description: Must be Admin+ if the tag is locked or post count is >100.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: number
                  enum: *tag-categories
                reason:
                  type: string
                is_locked:
                  description: Must be Admin+.
                  type: boolean
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /tags/{id}/correction.json:
    post:
      summary: Correct Tag
      tags:
        - Tags
      security:
        - basicAuth: []
      description: You must be Janitor+. `commit=Fix` must be set.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - commit
              properties:
                commit:
                  type: string
                  description: If not set, nothing will happen.
      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /tags/preview.json:
    get:
      summary: Preview Tags
      tags:
        - Tags
      parameters:
        - name: tags
          in: query
          required: true
          description: The tags to preview, space separated.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagPreview"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Tag Type Versions
  /tag_type_versions.json:
    get:
      summary: Search Tag Versions
      tags:
        - Tag Versions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[tag]
          in: query
          schema:
            type: string
        - name: search[user_id]
          in: query
          schema:
            type: string
        - name: search[user_name]
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagTypeVersion"
  # Tag Aliases
  /tag_aliases.json:
    get:
      summary: Search Tag Aliases
      tags:
        - Tag Aliases
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - created_at
              - updated_at
              - name
              - tag_count
        - in: query
          name: search[name_matches]
          schema:
            type: string
        - in: query
          name: search[antecedent_name]
          schema:
            type: string
        - in: query
          name: search[consequent_name]
          schema:
            type: string
        - in: query
          name: search[status]
          schema:
            type: string
            enum: *tag-request-statuses
        - in: query
          name: search[antecedent_tag_category]
          schema:
            type: number
            enum: *tag-categories
        - in: query
          name: search[consequent_tag_category]
          schema:
            type: number
            enum: *tag-categories
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[approver_id]
          schema:
            type: number
        - in: query
          name: search[approver_name]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagAlias"
  /tag_aliases/{id}.json:
    get:
      summary: Get Tag Alias
      tags:
        - Tag Aliases
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag alias.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagAlias"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Tag Alias
      tags:
        - Tag Aliases
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag alias.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                antecedent_name:
                  type: string
                consequent_name:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Reject Tag Alias
      tags:
        - Tag Aliases
      description: You must be the creator of the request (if pending), or Admin+.
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag alias.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /tags/aliases/{id}/approve.json:
    post:
      summary: Approve Tag Alias
      tags:
        - Tag Aliases
      security:
        - basicAuth: []
      description: You must be Admin+.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /tag_alias_requests.json:
    post:
      summary: Create Tag Alias
      tags:
        - Tag Aliases
      security:
        - basicAuth: []
      description: Errors will result in a 406 with no information.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - antecedent_name
                - consequent_name
                - reason
              properties:
                antecedent_name:
                  type: string
                consequent_name:
                  type: string
                reason:
                  type: string
                skip_forum:
                  type: boolean
                  description: Must be Admin+.
      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        406:
          description: Failure
  # Tag Implications
  /tag_implications.json:
    get:
      summary: Search Tag Implications
      tags:
        - Tag Implications
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - created_at
              - updated_at
              - name
              - tag_count
        - in: query
          name: search[name_matches]
          schema:
            type: string
        - in: query
          name: search[antecedent_name]
          schema:
            type: string
        - in: query
          name: search[consequent_name]
          schema:
            type: string
        - in: query
          name: search[status]
          schema:
            type: string
            enum: *tag-request-statuses
        - in: query
          name: search[antecedent_tag_category]
          schema:
            type: number
            enum: *tag-categories
        - in: query
          name: search[consequent_tag_category]
          schema:
            type: number
            enum: *tag-categories
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[approver_id]
          schema:
            type: number
        - in: query
          name: search[approver_name]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagImplication"
  /tag_implications/{id}.json:
    get:
      summary: Get Tag Implication
      tags:
        - Tag Implications
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag implication.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagImplication"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Tag Implication
      tags:
        - Tag Implications
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag implication.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                antecedent_name:
                  type: string
                consequent_name:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Reject Tag Implication
      tags:
        - Tag Implications
      description: You must be the creator of the request (if pending), or Admin+.
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tag implication.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /tags/implications/{id}/approve.json:
    post:
      summary: Approve Tag Implication
      tags:
        - Tag Implications
      security:
        - basicAuth: []
      description: You must be Admin+.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /tag_implication_requests.json:
    post:
      summary: Create Tag Implication
      tags:
        - Tag Implications
      security:
        - basicAuth: []
      description: Errors will result in a 406 with no information.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - antecedent_name
                - consequent_name
                - reason
              properties:
                antecedent_name:
                  type: string
                consequent_name:
                  type: string
                reason:
                  type: string
                skip_forum:
                  type: boolean
                  description: Must be Admin+.
      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        406:
          description: Failure
  # Bulk Related Tags
  /related_tag/bulk.json:
    post:
      summary: List Bulk Related Tags
      tags:
        - Related Tags
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                category_id:
                  type: number
                  enum: *tag-categories
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                examples:
                  - {"male":[{"name":"male","count":0,"category_id":0}]}
                patternProperties:
                  "^.+$":
                    type: array
                    items:
                      $ref: "#/components/schemas/BulkRelatedTag"
        403:
          $ref: "#/components/responses/AccessDenied"
  # Takedowns
  /takedowns.json:
    get:
      summary: Search Takedowns
      tags:
        - Takedowns
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - in: query
          name: search[order]
          schema:
            type: string
            description: Must Admin+ to use.
            enum:
              - id_asc
              - id_desc
              - status
              - post_count
        - in: query
          name: search[status]
          schema:
            type: string
        - in: query
          name: search[source]
          description: Must be Moderator+ to use.
          schema:
            type: string
        - in: query
          name: search[reason]
          description: Must be Moderator+ to use.
          schema:
            type: string
        - in: query
          name: search[creator_id]
          description: Must be Moderator+ to use.
          schema:
            type: number
        - in: query
          name: search[creator_name]
          description: Must be Moderator+ to use.
          schema:
            type: string
        - in: query
          name: search[reason_hidden]
          description: Must be Moderator+ to use.
          schema:
            type: boolean
        - in: query
          name: search[instructions]
          description: Must be Moderator+ to use.
          schema:
            type: string
        - in: query
          description: Must be Moderator+ to use.
          name: search[post_id]
          schema:
            type: number
        - in: query
          description: Must be Moderator+ to use.
          name: search[notes]
          schema:
            type: string
        - in: query
          description: Must be Admin+ to use.
          name: search[email]
          schema:
            type: string
        - in: query
          name: search[vericode]
          description: Must be Admin+ to use.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Takedown"
    post:
      summary: Create Takedown
      tags:
        - Takedowns
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - reason
              properties:
                email:
                  type: string
                source:
                  type: string
                instructions:
                  type: string
                reason:
                  type: string
                post_ids:
                  type: array
                  items:
                    type: number
                reason_hidden:
                  type: boolean
                notes:
                  type: string
                  description: Must have the bd staff user flag to use.
                del_post_ids:
                  type: array
                  description: Must have the bd staff user flag to use.
                  items:
                    type: number
                status:
                  type: string
                  description: Must have the bd staff user flag to use.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Takedown"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /takedowns/{id}.json:
    get:
      summary: Get Takedown
      tags:
        - Takedowns
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the takedown.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Takedown"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Takedown
      tags:
        - Takedowns
      security:
        - basicAuth: []
      description: You must have the bd staff user flag.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the takedown.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                takedown:
                  type: object
                  properties:
                    notes:
                      type: string
                    reason_hidden:
                      type: boolean
                takedown_posts:
                  type: string
                process_takedown:
                  type: boolean
                  description: If not truthy, the takedown will be denied.
                delete_reason:
                  type: boolean
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Takedown
      tags:
        - Takedowns
      security:
        - basicAuth: []
        

      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the takedown.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /takedowns/{id}/add_by_ids.json:
    post:
      summary: Add Posts To Takedown By IDs
      tags:
        - Takedowns
      security:
        - basicAuth: []
      description: You must have the bd staff user flag.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_ids
              properties:
                post_ids:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - added_count
                  - added_post_ids
                properties:
                  added_count:
                    type: number
                  added_post_ids:
                    type: array
                    items:
                      type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /takedowns/{id}/add_by_tags.json:
    post:
      summary: Add Posts To Takedown By Tags
      tags:
        - Takedowns
      security:
        - basicAuth: []
      description: You must have the bd staff user flag.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_tags
              properties:
                post_tags:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - added_count
                  - added_post_ids
                properties:
                  added_count:
                    type: number
                  added_post_ids:
                    type: array
                    items:
                      type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /takedowns/{id}/count_matching_posts.json:
    post:
      summary: Count Matching Posts
      tags:
        - Takedowns
      security:
        - basicAuth: []
      description: You must have the bd staff user flag.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_tags
              properties:
                post_tags:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - matched_post_count
                properties:
                  matched_post_count:
                    type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /takedowns/{id}/remove_by_ids.json:
    post:
      summary: Remove Posts From Takedown By IDs
      tags:
        - Takedowns
      security:
        - basicAuth: []
      description: You must have the bd staff user flag.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_ids
              properties:
                post_ids:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Tickets
  /tickets.json:
    get:
      summary: Search Tickets
      tags:
        - Tickets
      description: You must be Janitor+ to see tickets you did not create.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - in: query
          name: search[creator_name]
          description: You must be Moderator+.
          schema:
            type: string
        - in: query
          name: search[creator_id]
          description: You must be Moderator+ unless providing your own id.
          schema:
            type: number
        - in: query
          name: search[claimant_name]
          description: You must be Moderator+.
          schema:
            type: string
        - in: query
          name: search[claimant_id]
          description: You must be Moderator+.
          schema:
            type: number
        - in: query
          name: search[accused_name]
          description: You must be Moderator+.
          schema:
            type: string
        - in: query
          name: search[accused_id]
          description: You must be Moderator+.
          schema:
            type: number
        - in: query
          name: search[qtype]
          schema:
            type: string
            enum: *ticket-types
        - in: query
          name: search[reason]
          description: You must be Moderator+.
          schema:
            type: string
        - in: query
          name: search[status]
          schema:
            type: string
            enum:
              - pending
              - partial
              - approved
              - pending_claimed
              - pending_unclaimed
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        403:
          $ref: "#/components/responses/AccessDenied"
  /tickets/{id}.json:
    get:
      summary: Get Ticket
      tags:
        - Tickets
      security:
        - basicAuth: []
      description: You must be Janitor+ to see tickets you did not create.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the ticket.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Ticket
      tags:
        - Tickets
      description: You must be Moderator+.
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - response
              properties:
                status:
                  type: string
                  enum:
                    - partial
                    - approved
                response:
                  type: string                  
                record_type:
                  type: string
                  enum: *warning-types
                send_update_dmail:
                  type: boolean
                  description: An update dmail will always be sent when the status is changed.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /tickets/{id}/claim.json:
    post:
      summary: Claim Ticket
      tags:
        - Tickets
      description: You must be Moderator+. Errors are quietly swallowed and shown as notices in html.
      security:
        - basicAuth: []
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /tickets/{id}/unclaim.json:
    post:
      summary: Unclaim Ticket
      tags:
        - Tickets
      description: You must be Moderator+. Errors are quietly swallowed and shown as notices in html.
      security:
        - basicAuth: []
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Uploads
  /uploads.json:
    get:
      summary: Search Uploads
      tags:
        - Uploads
      description: You must be Janitor+.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[uploader_id]
          schema:
            type: number
        - in: query
          name: search[uploader_name]
          schema:
            type: string
        - in: query
          name: search[source]
          schema:
            type: string
        - in: query
          name: search[source_matches]
          schema:
            type: string
        - in: query
          name: search[rating]
          schema:
            type: string
            enum: *ratings
        - in: query
          name: search[parent_id]
          schema:
            type: number
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[has_post]
          schema:
            type: boolean
        - in: query
          name: search[post_tags_match]
          schema:
            type: string
        - in: query
          name: search[status]
          schema:
            type: string
            description: |
              Note: The "error" status will be proceeded by an error, ex: "error: RuntimeError - No file or source URL provided"
            enum:
              - completed
              - processing
              - pending
              - error
        - in: query
          name: search[backtrace]
          schema:
            type: string
        - in: query
          name: search[tag_string]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Upload"
    post:
      summary: Upload Post
      tags:
        - Uploads
        - Posts
      security:
        - basicAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - source
                - tag_string
                - rating
              properties:
                upload[file]:
                  type: binary
                  description: Mutually exclusive with direct_url.
                upload[direct_url]:
                  type: string
                  description: Mutually exclusive with file.
                upload[source]:
                  type: string
                upload[tag_string]:
                  type: string
                upload[rating]:
                  type: string
                  enum: *ratings
                upload[parent_id]:
                  type: number
                upload[description]:
                  type: string
                upload[as_pending]:
                  type: boolean
                  description: Must have the "Unrestricted Uploads" permission.
                upload[locked_rating]:
                  type: boolean
                  description: Must be Privileged+ to use.
                upload[locked_tags]:
                  type: string
                  description: Must be Admin+ to use.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - success
                  - location
                  - post_id
                properties:
                  success:
                    type: boolean
                    enum:
                      - true
                  location:
                    type: string
                  post_id:
                    type: number
        403:
          $ref: "#/components/responses/AccessDenied"
        412:
          $ref: "#/components/responses/MessageError"
  # Upload Whitelists
  /upload_whitelists.json:
    get:
      summary: Search Upload Whitelists
      tags:
        - Upload Whitelists
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - pattern
              - updated_at
              - created_at
        - in: query
          name: search[pattern]
          schema:
            type: string
        - in: query
          name: search[note]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UploadWhitelist"
    post:
      summary: Create Upload Whitelist
      tags:
        - Upload Whitelists
      security:
        - basicAuth: []
      description: You must be Admin+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - allowed
                - pattern
              properties:
                allowed:
                  type: string
                pattern:
                  type: string
                reason:
                  type: string
                note:
                  type: string
                hidden:
                  type: boolean
  /upload_whitelists/{id}.json:
    patch:
      summary: Edit Upload Whitelist
      tags:
        - Upload Whitelists
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the upload whitelist entry.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                allowed:
                  type: string
                pattern:
                  type: string
                reason:
                  type: string
                note:
                  type: string
                hidden:
                  type: boolean
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Upload Whitelist
      tags:
        - Upload Whitelists
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the upload whitelist.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /upload_whitelists/{id}/is_allowed.json:
    get:
      summary: Check If URL Is Allowed
      tags:
        - Upload Whitelists
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the upload whitelist.
          schema:
            type: number
        - name: url
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - url
                  - domain
                  - is_allowed
                  - reason
                properties:
                  url:
                    type: string
                  domain:
                    type: string
                  is_allowed:
                    type: boolean
                  reason:
                    type: string
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Users
  /users.json:
    get:
      summary: Search Users
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - name
              - post_upload_count
              - note_count
              - post_update_count
        - in: query
          name: search[name_matches]
          schema:
            type: string
        - in: query
          name: search[about_me]
          schema:
            type: string
        - in: query
          name: search[avatar_id]
          schema:
            type: number
        - in: query
          name: search[level]
          schema:
            type: number
        - in: query
          name: search[min_level]
          schema:
            type: number
        - in: query
          name: search[max_level]
          schema:
            type: number
        - in: query
          name: search[can_upload_free]
          schema:
            type: boolean
        - in: query
          name: search[can_approve_posts]
          schema:
            type: boolean
        - in: query
          name: search[email_matches]
          description: You must be Admin+.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: "#/components/schemas/User"
                    - $ref: "#/components/schemas/FullUser"
                      description: Extra properties included for the current user.
  /users/{id}.json:
    get:
      summary: Get User
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                  anyOf:
                    - $ref: "#/components/schemas/User"
                    - $ref: "#/components/schemas/FullCurrentUser"
                      description: Extra properties included for the current user.
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Current User
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user. The actual value is ignored, but something must be supplied.
          schema:
            type: number
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment_threshold:
                  type: number
                default_image_size:
                  type: string
                  enum:
                    - large
                    - fit
                    - fitv
                    - original
                favorite_tags:
                  type: string
                blacklisted_tags:
                  type: string
                time_zone:
                  type: string
                  description: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
                per_page:
                  type: number
                custom_style:
                  type: string
                description_collapsed_initially:
                  type: boolean
                hide_comments:
                  type: boolean
                receive_email_notifications:
                  type: boolean
                enable_keyboard_navigation:
                  type: boolean
                enable_privacy_mode:
                  type: boolean
                disable_user_dmails:
                  type: boolean
                blacklist_users:
                  type: boolean
                show_post_statistics:
                  type: boolean
                style_usernames:
                  type: boolean
                show_hidden_comments:
                  type: boolean
                enable_autocomplete:
                  type: boolean
                disable_cropped_thumbnails:
                  type: boolean
                enable_safe_mode:
                  type: boolean
                disable_responsive_mode:
                  type: boolean
                dmail_filter_attributes:
                  type: object
                  properties:
                    id:
                      type: number
                    words:
                      type: string
                profile_about:
                  type: string
                profile_artinfo:
                  type: string
                avatar_id:
                  type: number
                enable_compact_uploader:
                  type: boolean
                  description: You must have uploaded at least 10 posts.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /users/upload_limit.json:
    get:
      summary: Get Current User
      tags:
        - Users
      security:
        - basicAuth: []
      description: |
        This is a crude but effective way to get the currently authenticated user without scraping HTML.
        Note that this route does not include some properties included in the show action.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"
        403:
          $ref: "#/components/responses/AccessDenied"
  /maintenance/user/count_fixes.json:
    post:
      summary: Fix User Counts
      tags:
        - Users
      security:
        - basicAuth: []
      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
  /maintenance/user/dmail_filter.json:
    patch:
      summary: Update User Dmail Filter
      tags:
        - DMails
      parameters:
        - name: dmail_id
          in: query
          required: true
          description: Due to the odd way this route works, a dmail is REQUIRED to edit your dmail filter. You must be the owner of the dmail.
          schema:
            type: number
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                words:
                  type: string
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
  # User Feedbacks
  /user_feedbacks.json:
    get:
      summary: Search User Feedbacks
      tags:
        - User Feedbacks
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[deleted]
          description: You must be Moderator+.
          schema:
            type: string
            enum:
              - included
              - excluded
              - only
        - in: query
          name: search[body_matches]
          schema:
            type: string
        - in: query
          name: search[user_id]
          schema:
            type: number
        - in: query
          name: search[user_name]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[category]
          schema:
            type: string
            enum: *feedback-categories
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserFeedback"
    post:
      summary: Create User Feedback
      tags:
        - User Feedbacks
      security:
        - basicAuth: []
      description: You must be Moderator+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - body
                - category
              properties:
                user_id:
                  type: number
                user_name:
                  type: string
                body:
                  type: string
                category:
                  type: string
                  enum: *feedback-categories
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFeedback"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /user_feedbacks/{id}.json:
    get:
      summary: Get User Feedback
      tags:
        - User Feedbacks
      description: You must be Moderator+ if the feedback is deleted.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the feedback.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFeedback"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit User Feedback
      tags:
        - User Feedbacks
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the feedback.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                category:
                  type: string
                  enum: *feedback-categories
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Destroy User Feedback
      tags:
        - User Feedbacks
      security:
        - basicAuth: []
      description: You must be Admin+, or the creator and Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the feedback.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /user_feedbacks/{id}/delete.json:
    put:
      summary: Delete User Feedback
      tags:
        - User Feedbacks
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the feedback.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /user_feedbacks/{id}/undelete.json:
    put:
      summary: Undelete User Feedback
      tags:
        - User Feedbacks
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the feedback.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # User Name Change Requests
  /user_name_change_requests.json:
    get:
      summary: Search User Name Change Requests
      tags:
        - User Name Change Requests
      security:
        - basicAuth: []
      description: You must be Moderator+.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[current_id]
          schema:
            type: number
        - in: query
          name: search[current_name]
          schema:
            type: string
        - in: query
          name: search[original_name]
          schema:
            type: string
        - in: query
          name: search[desired_name]
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserNameChangeRequest"
    post:
      summary: Create User Name Change Request
      tags:
        - User Name Change Requests
      security:
        - basicAuth: []
      description: You must be Moderator+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - desired_name
              properties:
                desired_name:
                  type: string
                change_reason:
                  type: string
      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /user_name_change_request/{id}.json:
    get:
      summary: Get User Name Change Request
      tags:
        - User Name Change Requests
      security:
        - basicAuth: []
      description: You must be the creator of the request or Moderator+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the name change request.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNameChangeRequest"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /user_revert.json:
    post:
      summary: Revert User
      tags:
        - Users
      security:
        - basicAuth: []
      description: You must be Moderator+.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: number
      responses:
        302:
          description: Success
        404:
          $ref: "#/components/responses/NotFound"
  # Wiki Pages
  /wiki_pages.json:
    get:
      summary: Search Wiki Pages
      tags:
        - Wiki Pages
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - title
              - post_count
        - in: query
          name: search[title]
          schema:
            type: string
        - in: query
          name: search[title_matches]
          schema:
            type: string
        - in: query
          name: search[body_matches]
          schema:
            type: string
        - in: query
          name: search[other_names_match]
          schema:
            type: string
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[parent]
          schema:
            type: string
        - in: query
          name: search[other_names_present]
          schema:
            type: boolean
        - in: query
          name: search[is_locked]
          schema:
            type: boolean
        - in: query
          name: search[is_deleted]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WikiPage"
    post:
      summary: Create Wiki Page
      tags:
        - Wiki Pages
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - body
              properties:
                title:
                  type: string
                body:
                  type: string
                edit_reason:
                  type: string
                parent:
                  type: string
                  description: Must be Privileged+ to use.
                is_locked:
                  type: boolean
                  description: Must be Janitor+ to use.
                is_deleted:
                  type: boolean
                  description: Must be Janitor+ to use.
                skip_secondary_validations:
                  type: boolean
                  description: Must be Janitor+ to use.
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WikiPage"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
  /wiki_pages/{id}.json:
    get:
      summary: Get Wiki Page
      tags:
        - Wiki Pages
      parameters:
        - name: id
          in: path
          required: true
          description: The ID or name of the wiki page.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WikiPage"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Edit Wiki Page
      tags:
        - Wiki Pages
      security:
        - basicAuth: []
      description: You must be Janitor+ if the wiki page is locked.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the wiki page.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                edit_reason:
                  type: string
                parent:
                  type: string
                  description: Must be Privileged+ to use.
                title:
                  type: string
                  description: Must be Janitor+ to use.
                is_locked:
                  type: boolean
                  description: Must be Janitor+ to use.
                is_deleted:
                  type: boolean
                  description: Must be Janitor+ to use.
                skip_secondary_validations:
                  type: boolean
                  description: Must be Janitor+ to use.
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
    delete:
      summary: Delete Wiki Page
      tags:
        - Wiki Pages
      security:
        - basicAuth: []
      description: You must be Admin+
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the wiki page.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /wiki_page/{id}/revert.json:
    put:
      summary: Revert Wiki Page
      tags:
        - Wiki Pages
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the wiki page.
          schema:
            type: number
        - name: version_id
          in: query
          required: true
          description: The version ID to revert to.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  # Wiki Page Versions
  /wiki_page_versions.json:
    get:
      summary: Search Wiki Page Versions
      tags:
        - Wiki Page Versions
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/ip_addr"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
        - in: query
          name: search[updater_id]
          schema:
            type: number
        - in: query
          name: search[updater_name]
          schema:
            type: string
        - in: query
          name: search[wiki_page_id]
          schema:
            type: number
        - in: query
          name: search[title]
          schema:
            type: string
        - in: query
          name: search[body]
          schema:
            type: string
        - in: query
          name: search[is_locked]
          schema:
            type: boolean
        - in: query
          name: search[is_deleted]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WikiPageVersion"
  /wiki_page_versions/{id}.json:
    get:
      summary: Get Wiki Page Version
      tags:
        - Wiki Page Versions
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the wiki page version.
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WikiPageVersion"
        404:
          $ref: "#/components/responses/NotFound"
  # Admin Users
  /admin/users/alt_list.json:
    get:
      summary: Get Alt List
      tags:
        - Admin Users
      security:
        - basicAuth: []
      description: You must be Admin+.
      parameters:
        - name: page
          in: query
          description: The page number of results to get. Between 1 and 9999.
          schema:
            type: number
            minimum: 1
            maximum: 9999
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  - type: number
                    description: ID of concerned user.
                  - type: array
                    items:
                      type: number
                      description: ID of suspected alt.
                examples:
                  - [[1,[2]],[2,[1]]]
/admins/users/{id}.json:
  patch:
    summary: Admin Edit User
    tags:
      - Admin Users
    security:
      - basicAuth: []
    description: You must be Admin+. If editing an Admin+, you must be Owner+.
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the user.
        schema:
          type: number
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              verified:
                type: boolean
                description: Must have the bd staff user flag to use.
              level:
                type: number
                description: Must have the bd staff user flag to promote to Admin+.
              name:
                type: string
              profile_about:
                type: string
              profile_artinfo:
                type: string
              base_upload_limit:
                type: number
              enable_privacy_mode:
                type: boolean
              email:
                type: string
                description: Must have the bd staff user flag to use.
              can_approve_posts:
                type: boolean
              can_upload_free:
                type: boolean
              no_flagging:
                type: boolean
              replacements_beta:
                type: boolean
    responses:
      204:
        description: Success
      400:
        $ref: "#/components/responses/MessageError"
      403:
        $ref: "#/components/responses/AccessDenied"
      404:
        $ref: "#/components/responses/NotFound"
      422:
        $ref: "#/components/responses/ExpectedError"
  /moderator/post/posts/{id}/delete.json:
    post:
      summary: Delete Post
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission. `commit=Delete` must be set.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            type: object
            properties:
              reason:
                type: string
                description: If the post does not have an active flag, this is required.
              move_favorites:
                type: boolean
                description: Move favorites to parent.
              copy_sources:
                type: boolean
                description: Copy sources to parent.
              copy_tags:
                type: boolean
                description: Copy tags to parent.
              commit:
                type: string
                description: If not set, nothing will happen.
                enum:
                  - Delete

      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /moderator/post/posts/{id}/undelete.json:
    post:
      summary: Undelete Post
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /moderator/post/posts/{id}/regenerate_thumbnails.json:
    post:
      summary: Regenerate Post Thumbnails
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must be Janitor+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /posts/{id}/regenerate_videos.json:
    post:
      summary: Regenerate Post Videos
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must be Janitor+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      responses:
        204:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /moderator/post/posts/{id}/expunge.json:
    post:
      summary: Expunge Post
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission and be Admin+.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - post
                properties:
                  post:
                    $ref: "#/components/schemas/Post"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/ExpectedError"
  /moderator/post/posts/{id}/move_favorites.json:
    post:
      summary: Move Post Favorites
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission. `commit=Submit`` must be set.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the post.
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - commit
              properties:
                commit:
                  type: string
                  description: If not set, nothing will happen.
                  enum:
                    - Submit
      responses:
        302:
          description: Success
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  /moderator/post/approval.json:
    post:
      summary: Approve Post
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                post_id:
                  type: number
      responses:
        201:
          description: Success
        204:
          description: Failure
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Unapprove Post
      tags:
        - Posts
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission. The response does not differ for success or failure.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
              properties:
                post_id:
                  type: number
      responses:
        204:
          description: Success/Failure
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Post Disapprovals
  /moderator/post/disapprovals.json:
    get:
      summary: Search Post Disapprovals
      tags:
        - Post Disapprovals
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/id"
        - name: search[order]
          in: query
          schema:
            type: string
            enum:
              - id_asc
              - id_desc
              - post_id
              - post_id_desc
        - in: query
          name: search[creator_id]
          schema:
            type: number
        - in: query
          name: search[creator_name]
          schema:
            type: string
        - in: query
          name: search[post_id]
          schema:
            type: number
        - in: query
          name: search[message]
          schema:
            type: string
        - in: query
          name: search[post_tags_match]
          schema:
            type: string
        - in: query
          name: search[reason]
          schema:
            type: string
        - in: query
          name: search[has_message]
          schema:
            type: boolean
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDisapproval"
    post:
      summary: Create Post Disapproval
      tags:
        - Post Disapprovals
      security:
        - basicAuth: []
      description: You must have the "Approve Posts" permission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - post_id
                - reason
              properties:
                post_id:
                  type: number
                reason:
                  type: string
                  enum:
                    - borderline_quality
                    - borderline_relevancy
                    - other
                message:
                  type: string
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDisapproval"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/ExpectedError"
